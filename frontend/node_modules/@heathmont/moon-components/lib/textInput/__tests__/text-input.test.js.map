{"version":3,"sources":["../../../src/textInput/__tests__/text-input.test.tsx"],"names":["renderWithTheme","component","sportsbetDark","describe","test","textInput","expect","toMatchSnapshot"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { create } from 'react-test-renderer';\nimport { sportsbetDark, ThemeProvider } from '@heathmont/moon-themes';\nimport 'jest-styled-components';\n\nimport TextInput from '../TextInput';\n\nconst renderWithTheme = (component: JSX.Element) => (\n  <ThemeProvider theme={sportsbetDark}>{component}</ThemeProvider>\n);\n\ndescribe('TextInput', () => {\n  test('renders correctly with `text` type by default', () => {\n    const textInput = create(\n      renderWithTheme(<TextInput label=\"Example Input\" />),\n    );\n\n    expect(textInput).toMatchSnapshot();\n  });\n\n  test('renders correctly without a label', () => {\n    const textInput = create(\n      renderWithTheme(<TextInput placeholder=\"Enter code\" />),\n    );\n\n    expect(textInput).toMatchSnapshot();\n  });\n\n  test('renders correctly for other types', () => {\n    const textInput = create(\n      renderWithTheme(\n        <fieldset>\n          <TextInput label=\"Text\" type=\"text\" required />\n          <TextInput label=\"Date\" type=\"date\" required />\n          <TextInput label=\"Email\" type=\"email\" required />\n          <TextInput label=\"Number\" type=\"number\" required />\n          <TextInput label=\"Password\" type=\"password\" required />\n          <TextInput label=\"Search\" type=\"search\" required />\n          <TextInput label=\"Telephone\" type=\"tel\" required />\n          <TextInput label=\"URL\" type=\"url\" required />\n        </fieldset>,\n      ),\n    );\n    expect(textInput).toMatchSnapshot();\n  });\n\n  test('renders as `disabled` when defined', () => {\n    const textInput = create(\n      renderWithTheme(\n        <fieldset>\n          <TextInput label=\"Text\" type=\"text\" disabled />\n          <TextInput label=\"Date\" type=\"date\" disabled />\n          <TextInput label=\"Email\" type=\"email\" disabled />\n          <TextInput label=\"Number\" type=\"number\" disabled />\n          <TextInput label=\"Password\" type=\"password\" disabled />\n          <TextInput label=\"Search\" type=\"search\" disabled />\n          <TextInput label=\"Telephone\" type=\"tel\" disabled />\n          <TextInput label=\"URL\" type=\"url\" disabled />\n        </fieldset>,\n      ),\n    );\n    expect(textInput).toMatchSnapshot();\n  });\n\n  test('renders as an `error` when defined', () => {\n    const textInput = create(\n      renderWithTheme(\n        <fieldset>\n          <TextInput label=\"Text\" type=\"text\" error />\n          <TextInput label=\"Date\" type=\"date\" error />\n          <TextInput label=\"Email\" type=\"email\" error />\n          <TextInput label=\"Number\" type=\"number\" error />\n          <TextInput label=\"Password\" type=\"password\" error />\n          <TextInput label=\"Search\" type=\"search\" error />\n          <TextInput label=\"Telephone\" type=\"tel\" error />\n          <TextInput label=\"URL\" type=\"url\" error />\n        </fieldset>,\n      ),\n    );\n    expect(textInput).toMatchSnapshot();\n  });\n\n  test('renders with rounded prop', () => {\n    const textInput = create(\n      renderWithTheme(<TextInput rounded label=\"Text\" type=\"text\" error />),\n    );\n    expect(textInput).toMatchSnapshot();\n  });\n});\n"],"file":"text-input.test.js"}