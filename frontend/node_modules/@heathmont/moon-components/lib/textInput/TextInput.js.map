{"version":3,"sources":["../../src/textInput/TextInput.tsx"],"names":["TextInputElem","Input","error","color","theme","borderColor","piccolo","chiChi","outline","TextInput","props","ref","type","disabled","placeholder","label","rounded","dir","rest","inputProps","TextInputInner"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAMA,aAAa,GAAG,kCAAOC,YAAP,CAAH;AAAA;AAAA;AAAA,GAAwB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAmBC,KAAnB,QAAUC,KAAV,CAAmBD,KAAnB;AAAA,SAAkC;AAC3E,eAAW;AACTE,MAAAA,WAAW,EAAE,CAACH,KAAD,GAASC,KAAK,CAACG,OAAN,CAAc,GAAd,CAAT,GAA8BH,KAAK,CAACI,MAAN,CAAa,GAAb,CADlC;AAETC,MAAAA,OAAO,EAAE;AAFA;AADgE,GAAlC;AAAA,CAAxB,CAAnB;AAOA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,SAAS,GAAG,uBAA6C,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC7E,oBASID,KATJ,CACEE,IADF;AAAA,MACEA,IADF,4BACS,MADT;AAAA,MAEEC,QAFF,GASIH,KATJ,CAEEG,QAFF;AAAA,2BASIH,KATJ,CAGEI,WAHF;AAAA,MAGEA,WAHF,mCAGgB,GAHhB;AAAA,MAIEC,KAJF,GASIL,KATJ,CAIEK,KAJF;AAAA,MAKEb,KALF,GASIQ,KATJ,CAKER,KALF;AAAA,MAMEc,OANF,GASIN,KATJ,CAMEM,OANF;AAAA,MAOEC,GAPF,GASIP,KATJ,CAOEO,GAPF;AAAA,MAQKC,IARL,4BASIR,KATJ;;AAUA,MAAMS,UAAU;AACdN,IAAAA,QAAQ,EAARA,QADc;AAEdD,IAAAA,IAAI,EAAJA,IAFc;AAGdE,IAAAA,WAAW,EAAXA,WAHc;AAIdE,IAAAA,OAAO,EAAPA,OAJc;AAKdC,IAAAA,GAAG,EAAHA;AALc,KAMXC,IANW,CAAhB;;AASA,MAAME,cAAc,GAAG,SAAjBA,cAAiB;AAAA,wBACrB,gCAAC,aAAD;AACE,MAAA,OAAO,EAAE,CAAC,CAACJ,OADb;AAEE,MAAA,KAAK,EAAE,CAAC,CAACd,KAFX;AAGE,MAAA,GAAG,EAAES,GAHP;AAIE,MAAA,GAAG,EAAEM;AAJP,OAKME,UALN,EADqB;AAAA,GAAvB;;AAUA,MAAI,CAACJ,KAAL,EAAY;AACV,WAAOK,cAAc,EAArB;AACD;;AAED,sBACE,gCAAC,YAAD;AAAO,IAAA,GAAG,EAAEH,GAAZ;AAAiB,IAAA,IAAI,EAAEF,KAAvB;AAA8B,IAAA,QAAQ,EAAEF;AAAxC,kBACE,kEACGO,cAAc,EADjB,EAEGlB,KAAK,iBAAI,gCAAC,iBAAD,QAAaA,KAAb,CAFZ,CADF,CADF;AAQD,CA1CiB,CAAlB;eA8CeO,S","sourcesContent":["import React, { forwardRef } from 'react';\nimport styled from 'styled-components';\n\nimport { Label } from '../private/label/label';\n\nimport { Input } from './Input';\nimport { InputError } from './Error';\n\n/**\n * Types & Settings\n */\ntype TextInputTypes =\n  | 'date'\n  | 'datetime-local'\n  | 'email'\n  | 'number'\n  | 'password'\n  | 'search'\n  | 'tel'\n  | 'text'\n  | 'url'\n  | 'time'\n  | 'url';\n\ntype TextInputProps = React.InputHTMLAttributes<HTMLInputElement> & {\n  label?: string;\n  type?: TextInputTypes;\n  placeholder?: string;\n  error?: boolean | string;\n  rounded?: boolean;\n  dir?: 'ltr' | 'rtl' | 'auto';\n};\n\nconst TextInputElem = styled(Input as any)(({ error, theme: { color } }) => ({\n  '&:focus': {\n    borderColor: !error ? color.piccolo[100] : color.chiChi[100],\n    outline: 'none',\n  },\n}));\n\n/**\n * Component\n *\n * 1. Leaving the placeholder as an empty string by default allows us to float\n *    the label when a user starts typing, even if a placeholder isn't defined.\n */\nconst TextInput = forwardRef<HTMLInputElement, TextInputProps>((props, ref) => {\n  const {\n    type = 'text',\n    disabled,\n    placeholder = ' ',\n    label,\n    error,\n    rounded,\n    dir,\n    ...rest\n  } = props;\n  const inputProps = {\n    disabled,\n    type,\n    placeholder,\n    rounded,\n    dir,\n    ...rest,\n  };\n\n  const TextInputInner = () => (\n    <TextInputElem\n      rounded={!!rounded}\n      error={!!error}\n      ref={ref}\n      dir={dir}\n      {...inputProps}\n    />\n  );\n\n  if (!label) {\n    return TextInputInner();\n  }\n\n  return (\n    <Label dir={dir} text={label} disabled={disabled}>\n      <>\n        {TextInputInner()}\n        {error && <InputError>{error}</InputError>}\n      </>\n    </Label>\n  );\n});\n\nexport type { TextInputProps };\n\nexport default TextInput;\n"],"file":"TextInput.js"}