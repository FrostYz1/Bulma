"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.buttonActive = exports.buttonHover = exports.buttonMockStateClass = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * buttonMockStateClass
 *
 * Generates a SMACSS-style state class, intended to be added alongside
 * traditional CSS `:state` selectors. This allows us to mock the appearance of
 * a button's state for documentation / purely stylistic purposes.
 */
var buttonMockStateClass = function buttonMockStateClass(state) {
  return {
    active: 'is-active',
    focus: 'has-focus',
    hover: 'is-hover'
  }[state];
};
/**
 * buttonActive
 *
 * Wraps styles with the appropriate "active"-style selectors.
 */


exports.buttonMockStateClass = buttonMockStateClass;

var buttonHover = function buttonHover(styles) {
  return _defineProperty({}, "\n    &.".concat(buttonMockStateClass('hover'), ",\n    &:hover\n  "), {
    '&:not([disabled])': _objectSpread({}, styles)
  });
};
/**
 * buttonFocus
 *
 * Wraps styles with the appropriate "focus"-style selectors.
 */


exports.buttonHover = buttonHover;

var buttonActive = function buttonActive(styles) {
  return _defineProperty({}, "\n    &.".concat(buttonMockStateClass('active'), ",\n    &.").concat(buttonMockStateClass('focus'), ",\n    &:active,\n    &:focus\n  "), _objectSpread({}, styles));
};

exports.buttonActive = buttonActive;
var _default = {
  buttonMockStateClass: buttonMockStateClass,
  buttonHover: buttonHover,
  buttonActive: buttonActive
};
exports["default"] = _default;
//# sourceMappingURL=states.js.map