"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _addMonths = _interopRequireDefault(require("date-fns/addMonths"));

var _subMonths = _interopRequireDefault(require("date-fns/subMonths"));

var _endOfDay = _interopRequireDefault(require("date-fns/endOfDay"));

var _format = _interopRequireDefault(require("date-fns/format"));

var _isAfter = _interopRequireDefault(require("date-fns/isAfter"));

var _isSameDay = _interopRequireDefault(require("date-fns/isSameDay"));

var _startOfDay = _interopRequireDefault(require("date-fns/startOfDay"));

var _isValid = _interopRequireDefault(require("date-fns/isValid"));

var _getMonthDays = require("./private/helpers/getMonthDays");

var _Picker = require("./private/Picker");

var _getWeekDayLabels = require("./private/helpers/getWeekDayLabels");

var _getDatesFromRange2 = require("./private/helpers/getDatesFromRange");

var _getPlaceholder = require("./private/helpers/getPlaceholder");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var RangeCalendar = function RangeCalendar(_ref) {
  var initialStartDate = _ref.startDate,
      initialEndDate = _ref.endDate,
      onDateChange = _ref.onDateChange,
      config = _ref.config,
      range = _ref.range,
      translations = _ref.translations,
      hasClickedOutside = _ref.hasClickedOutside,
      setIsOpen = _ref.setIsOpen,
      setPlaceholder = _ref.setPlaceholder;

  var _React$useState = _react["default"].useState(_objectSpread({
    startDate: initialStartDate,
    endDate: initialEndDate,
    range: range,
    hoveredDate: undefined,
    cursorDate: initialStartDate ? new Date(initialStartDate) : new Date()
  }, (0, _getDatesFromRange2.getDatesFromRange)({
    range: range,
    config: config,
    fallbackStartDate: initialStartDate,
    fallbackEndDate: initialEndDate
  }))),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      datesState = _React$useState2[0],
      setDatesState = _React$useState2[1];

  _react["default"].useEffect(function () {
    if (hasClickedOutside) {
      onDateChange({
        startDate: datesState.startDate,
        endDate: datesState.endDate,
        range: datesState.range
      });
      setPlaceholder((0, _getPlaceholder.getPlaceholder)({
        startDate: datesState.startDate,
        endDate: datesState.endDate,
        range: datesState.range,
        config: config,
        translations: translations
      }));
      setIsOpen(false);
    }
  });

  var apply = function apply() {
    onDateChange({
      startDate: datesState.startDate,
      endDate: datesState.endDate,
      range: datesState.range
    });
    setPlaceholder((0, _getPlaceholder.getPlaceholder)({
      startDate: datesState.startDate,
      endDate: datesState.endDate,
      range: datesState.range,
      config: config,
      translations: translations
    }));
    setIsOpen(false);
  };

  var selectDay = function selectDay(selectedDate) {
    if (datesState.startDate && !datesState.endDate && ((0, _isSameDay["default"])(datesState.startDate, selectedDate) || (0, _isAfter["default"])(selectedDate, datesState.startDate))) {
      var newEndDate = (0, _endOfDay["default"])(selectedDate);
      setDatesState(_objectSpread(_objectSpread({}, datesState), {}, {
        hoveredDate: undefined,
        endDate: newEndDate,
        range: ''
      }));
    } else if (datesState.startDate && datesState.endDate) {
      var newStartDate = (0, _startOfDay["default"])(selectedDate);
      setDatesState(_objectSpread(_objectSpread({}, datesState), {}, {
        hoveredDate: undefined,
        startDate: newStartDate,
        endDate: undefined,
        range: ''
      }));
    } else {
      var _newStartDate = (0, _startOfDay["default"])(selectedDate);

      setDatesState(_objectSpread(_objectSpread({}, datesState), {}, {
        hoveredDate: undefined,
        startDate: _newStartDate,
        range: ''
      }));
    }
  };

  var setStartDate = function setStartDate(startDate) {
    if ((0, _isValid["default"])(startDate) && startDate) {
      setDatesState(_objectSpread(_objectSpread({}, datesState), {}, {
        startDate: startDate,
        range: ''
      }));
    }
  };

  var setEndDate = function setEndDate(endDate) {
    if ((0, _isValid["default"])(endDate) && endDate) {
      setDatesState(_objectSpread(_objectSpread({}, datesState), {}, {
        endDate: endDate,
        range: ''
      }));
    }
  };

  var reset = function reset() {
    setDatesState({
      startDate: undefined,
      endDate: undefined,
      range: '',
      hoveredDate: undefined,
      cursorDate: new Date()
    });
  }; // TODO - onClickOutsideHandler


  var hoverDay = function hoverDay(hoveredDate) {
    if (datesState.startDate && !datesState.endDate && !(0, _isSameDay["default"])(hoveredDate, datesState.startDate) && (0, _isAfter["default"])(hoveredDate, datesState.startDate)) {
      setDatesState(_objectSpread(_objectSpread({}, datesState), {}, {
        hoveredDate: hoveredDate
      }));
    }
  };

  var selectRange = function selectRange(newRange) {
    var _getDatesFromRange = (0, _getDatesFromRange2.getDatesFromRange)({
      range: newRange,
      fallbackStartDate: datesState.startDate,
      fallbackEndDate: datesState.endDate,
      config: config
    }),
        startDate = _getDatesFromRange.startDate,
        endDate = _getDatesFromRange.endDate;

    setDatesState(_objectSpread(_objectSpread({}, datesState), {}, {
      startDate: startDate,
      endDate: endDate,
      hoveredDate: undefined,
      range: newRange,
      cursorDate: startDate || datesState.cursorDate
    }));
  };

  var nextMonth = function nextMonth() {
    setDatesState(_objectSpread(_objectSpread({}, datesState), {}, {
      cursorDate: (0, _addMonths["default"])(datesState.cursorDate, 2)
    }));
  };

  var prevMonth = function prevMonth() {
    setDatesState(_objectSpread(_objectSpread({}, datesState), {}, {
      cursorDate: (0, _subMonths["default"])(datesState.cursorDate, 2)
    }));
  };

  var firstMonth = (0, _getMonthDays.getMonthDays)({
    date: datesState.cursorDate,
    weekStartsOn: config && config.weekStartsOn
  });
  var nextMonthCurrentDate = (0, _addMonths["default"])(datesState.cursorDate, 1);
  var secondMonth = (0, _getMonthDays.getMonthDays)({
    date: nextMonthCurrentDate,
    weekStartsOn: config && config.weekStartsOn
  });
  var labels = {
    firstMonthLabel: (0, _format["default"])(datesState.cursorDate, config && config.monthLabelFormat || 'MMMM', config),
    firstMonthYearLabel: (0, _format["default"])(datesState.cursorDate, config && config.yearLabelFormat || 'yyyy', config),
    secondMonthLabel: (0, _format["default"])(nextMonthCurrentDate, config && config.monthLabelFormat || 'MMMM', config),
    secondMonthYearLabel: (0, _format["default"])(nextMonthCurrentDate, config && config.yearLabelFormat || 'yyyy', config),
    weekDayLabels: config && (0, _getWeekDayLabels.getWeekDayLabels)(config)
  };
  return /*#__PURE__*/_react["default"].createElement(_Picker.Picker, {
    datesState: datesState,
    labels: labels,
    translations: translations,
    config: config,
    onDayClick: selectDay,
    firstMonth: firstMonth,
    secondMonth: secondMonth,
    onDayMouseEnter: hoverDay,
    selectRange: selectRange,
    nextMonth: nextMonth,
    prevMonth: prevMonth,
    setStartDate: setStartDate,
    setEndDate: setEndDate,
    onDateChange: onDateChange,
    apply: apply,
    reset: reset
  });
};

var _default = RangeCalendar;
exports["default"] = _default;
//# sourceMappingURL=RangeCalendar.js.map