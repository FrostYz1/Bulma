"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectElement = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _moonUtils = require("@heathmont/moon-utils");

var _input = require("../../private/input/input");

var _settings = require("../../private/input/settings");

var _IconChevronDown = _interopRequireDefault(require("../../private/icons/IconChevronDown"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var selectIconSize = 10; // px

var selectIconOffset = function selectIconOffset(theme) {
  return selectIconSize + (0, _settings.inputSpacingX)(theme) * 2;
};

/**
 * Styles
 */
var SelectElement = (0, _styledComponents["default"])(_input.Input.withComponent('select')).withConfig({
  displayName: "element__SelectElement",
  componentId: "sc-1jc6zq6-0"
})(function (_ref) {
  var fullWidth = _ref.fullWidth,
      dir = _ref.dir,
      theme = _ref.theme;
  return [{
    color: (0, _settings.inputColors)('label')(theme),
    backgroundImage: (0, _moonUtils.inlineSvg)( /*#__PURE__*/_react["default"].createElement(_IconChevronDown["default"], {
      color: (0, _settings.inputColors)('icon')(theme)
    })),
    paddingRight: (0, _moonUtils.rem)(selectIconOffset(theme)),
    backgroundSize: (0, _moonUtils.rem)(selectIconSize),
    borderRadius: (0, _moonUtils.rem)(theme.radius.largest),
    '&:hover:enabled, &:focus:enabled': {
      cursor: 'pointer'
    },

    /**
     * Addresses a Firefox bug where line-height includes the border-width
     * on Select elements
     * https://bugzilla.mozilla.org/show_bug.cgi?id=1560824
     */
    '@supports (-moz-appearance:none)': {
      lineHeight: (0, _moonUtils.rem)(_settings.inputLineHeight - (0, _settings.inputBorderWidth)(theme) * 2)
    }
  }, !fullWidth && _defineProperty({}, (0, _moonUtils.mq)(theme.breakpoint.small), {
    width: 'auto'
  }), dir === 'rtl' && {
    backgroundPosition: "left ".concat((0, _moonUtils.rem)((0, _settings.inputIconPosition)(theme)), " center")
  }];
});
exports.SelectElement = SelectElement;
//# sourceMappingURL=element.js.map