var inputBorderWidth = function inputBorderWidth(_ref) {
  var borderWidth = _ref.borderWidth;
  return borderWidth;
};

var inputAnimationSpeed = function inputAnimationSpeed(_ref2) {
  var transitionDuration = _ref2.transitionDuration;
  return "".concat(transitionDuration["default"], "s");
};

var inputFontSize = 16;
var inputLineHeight = inputFontSize * 1.5;

var inputSpacingX = function inputSpacingX(theme) {
  return theme.space["default"] - inputBorderWidth(theme);
}; // px


var inputSpacingY = function inputSpacingY(theme) {
  return 10 - inputBorderWidth(theme);
}; // px


var inputIconSize = 20; // px

var inputIconPosition = function inputIconPosition(theme) {
  return inputSpacingX(theme);
};

var inputIconOffset = function inputIconOffset(theme) {
  return inputIconSize + inputSpacingX(theme) + inputIconPosition(theme);
};

var inputColors = function inputColors(key) {
  return function (_ref3) {
    var color = _ref3.color;
    var themedColor = {
      label: color.trunks[100],
      text: color.bulma[100],
      icon: color.trunks[100],
      placeholder: color.trunks[100],
      borderDefault: color.beerus[100],
      borderHover: color.goku[40],
      background: color.gohan[100],
      disabled: color.goku[80]
    };
    return themedColor[key];
  };
};

var inputBorder = function inputBorder(theme) {
  return "".concat(inputBorderWidth(theme), "px solid ").concat(inputColors('borderDefault')(theme));
};

export { inputAnimationSpeed, inputBorder, inputBorderWidth, inputColors, inputFontSize, inputLineHeight, inputIconSize, inputSpacingX, inputSpacingY, inputIconOffset, inputIconPosition };
//# sourceMappingURL=settings.js.map