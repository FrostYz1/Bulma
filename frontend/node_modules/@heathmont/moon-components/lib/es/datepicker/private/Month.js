import React from 'react';
import styled from 'styled-components';
import rem from 'polished/lib/helpers/rem';
import isSameDay from 'date-fns/isSameDay';
import isWithinInterval from 'date-fns/isWithinInterval';
import compareAsc from 'date-fns/compareAsc';
import getMonth from 'date-fns/getMonth';
import isDate from 'date-fns/isDate';
import { Day } from './Day';
var DayName = styled.div.withConfig({
  displayName: "Month__DayName",
  componentId: "sc-1tptf0l-0"
})(function (_ref) {
  var theme = _ref.theme;
  return {
    height: rem(32),
    color: theme.color.bulma[100],
    fontWeight: 'bold',
    textTransform: 'uppercase',
    textAlign: 'center',
    userSelect: 'none'
  };
});
var MonthYearLabel = styled.div.withConfig({
  displayName: "Month__MonthYearLabel",
  componentId: "sc-1tptf0l-1"
})(function (_ref2) {
  var theme = _ref2.theme;
  return {
    fontSize: rem(14),
    lineHeight: rem(20),
    color: theme.color.bulma[100],
    marginBottom: rem(20),
    width: '100%',
    textAlign: 'center',
    userSelect: 'none'
  };
});

var isInRangePreview = function isInRangePreview(_ref3) {
  var startDate = _ref3.startDate,
      hoveredDate = _ref3.hoveredDate,
      day = _ref3.day;

  if (!startDate) {
    return false;
  }

  if (!hoveredDate) {
    return false;
  }

  var isHoveredAfter = compareAsc(hoveredDate, startDate) > 0;

  if (isHoveredAfter) {
    return isWithinInterval(day, {
      start: startDate,
      end: hoveredDate
    });
  }

  return isWithinInterval(day, {
    start: hoveredDate,
    end: startDate
  });
};

var Days = styled.div.withConfig({
  displayName: "Month__Days",
  componentId: "sc-1tptf0l-2"
})({
  display: 'grid',
  gridTemplateColumns: 'repeat(7, 1fr)'
});
export var Month = function Month(_ref4) {
  var monthLabel = _ref4.monthLabel,
      year = _ref4.year,
      weekDayLabels = _ref4.weekDayLabels,
      monthDays = _ref4.monthDays,
      onDayClick = _ref4.onDayClick,
      onMouseEnter = _ref4.onMouseEnter,
      cursorDate = _ref4.cursorDate,
      startDate = _ref4.startDate,
      endDate = _ref4.endDate,
      hoveredDate = _ref4.hoveredDate;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MonthYearLabel, null, monthLabel, "\xA0\xA0", year), /*#__PURE__*/React.createElement(Days, null, weekDayLabels.map(function (dayLabel, weekIndex) {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React.createElement(DayName, {
        key: "".concat(dayLabel, "-").concat(weekIndex)
      }, dayLabel)
    );
  }), monthDays.map(function (day) {
    return /*#__PURE__*/React.createElement(Day, {
      key: day.getTime(),
      onDayClick: onDayClick,
      onMouseEnter: onMouseEnter,
      date: day,
      isToday: isSameDay(day, new Date()),
      isSameMonth: getMonth(day) === getMonth(cursorDate),
      isStartEdge: Boolean(startDate && isSameDay(startDate, day)),
      isEndEdge: Boolean(endDate && isSameDay(endDate, day)),
      isInRange: Boolean(startDate && isDate(startDate) && endDate && isDate(endDate) && isWithinInterval(day, {
        start: startDate,
        end: endDate
      })),
      isInRangePreview: isInRangePreview({
        startDate: startDate,
        hoveredDate: hoveredDate,
        day: day
      })
    });
  })));
};
//# sourceMappingURL=Month.js.map