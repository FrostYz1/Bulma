function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import styled from 'styled-components';
import format from 'date-fns/format';
import isValid from 'date-fns/isValid';
import compareAsc from 'date-fns/compareAsc';
import rem from 'polished/lib/helpers/rem';
import { mq } from '@heathmont/moon-utils';
import Button from '../../button/Button';
import TextInput from '../../textInput/TextInput';
var InputsPanelStyled = styled.div.withConfig({
  displayName: "InputsPanel__InputsPanelStyled",
  componentId: "sc-16fumdc-0"
})(function (_ref) {
  var _ref2;

  var theme = _ref.theme;
  return _ref2 = {
    gridArea: 'inputs',
    display: 'flex',
    flexDirection: 'column',
    paddingTop: rem(theme.space["default"])
  }, _defineProperty(_ref2, mq(theme.breakpoint.medium, 'max-width'), {
    '& > * + *': {
      marginTop: rem(theme.space["default"])
    }
  }), _defineProperty(_ref2, mq(theme.breakpoint.medium), {
    flexDirection: 'row',
    '& > * + *': {
      marginLeft: rem(theme.space["default"])
    }
  }), _ref2;
});
var StyledTextInput = styled(TextInput).withConfig({
  displayName: "InputsPanel__StyledTextInput",
  componentId: "sc-16fumdc-1"
})(function (_ref3) {
  var breakpoint = _ref3.theme.breakpoint;
  return _defineProperty({}, mq(breakpoint.medium), {
    maxWidth: rem(228)
  });
});
export var InputsPanel = function InputsPanel(_ref5) {
  var startDate = _ref5.startDate,
      endDate = _ref5.endDate,
      setStartDate = _ref5.setStartDate,
      setEndDate = _ref5.setEndDate,
      translations = _ref5.translations,
      apply = _ref5.apply,
      config = _ref5.config;
  var dateFormat = config.withHoursAndMinutes ? "yyyy-MM-dd'T'HH:mm" : 'yyyy-MM-dd';

  var _React$useState = React.useState(startDate ? format(startDate, dateFormat) : ''),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      inputStartDate = _React$useState2[0],
      setInputStartDate = _React$useState2[1];

  var _React$useState3 = React.useState(endDate ? format(endDate, dateFormat) : ''),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      inputEndDate = _React$useState4[0],
      setInputEndDate = _React$useState4[1];

  var _React$useState5 = React.useState(''),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      hasStartDateError = _React$useState6[0],
      setStartDateError = _React$useState6[1];

  var _React$useState7 = React.useState(false),
      _React$useState8 = _slicedToArray(_React$useState7, 2),
      hasEndDateError = _React$useState8[0],
      setEndDateError = _React$useState8[1];

  React.useEffect(function () {
    setInputStartDate(startDate ? format(startDate, dateFormat) : '');
    setInputEndDate(endDate ? format(endDate, dateFormat) : '');
    var isStartDayBefore = compareAsc(startDate, endDate) === -1;

    if (isStartDayBefore) {
      setStartDateError('');
      setEndDateError(false);
    }

    if (startDate && !endDate) {
      setInputEndDate('');
      setStartDateError('');
      setEndDateError(true);
    }
  }, [startDate, endDate]);
  return /*#__PURE__*/React.createElement(InputsPanelStyled, null, /*#__PURE__*/React.createElement(StyledTextInput, {
    error: hasStartDateError,
    type: config.withHoursAndMinutes ? 'datetime-local' : 'date',
    value: inputStartDate,
    onChange: function onChange(e) {
      e.preventDefault();
      setInputStartDate(e.target.value);
      var newStartDate = new Date(e.target.value);
      var isValidDate = isValid(newStartDate);

      if (!isValidDate) {
        setStartDateError('Not valid date');
        return;
      }

      if (isValidDate && endDate) {
        var isStartDayBefore = compareAsc(newStartDate, endDate) === -1;

        if (isStartDayBefore) {
          setStartDate(newStartDate);
          setStartDateError('');
          setEndDateError(false);
        } else {
          setStartDateError('Should before');
        }
      }
    }
  }), /*#__PURE__*/React.createElement(StyledTextInput, {
    error: hasEndDateError,
    type: config.withHoursAndMinutes ? 'datetime-local' : 'date',
    value: inputEndDate,
    onChange: function onChange(e) {
      e.preventDefault();
      setInputEndDate(e.target.value);
      var newEndDate = new Date(e.target.value);
      var isValidDate = isValid(newEndDate);

      if (!isValidDate) {
        setEndDateError(true);
        return;
      }

      if (isValidDate && startDate) {
        var isStartDayBefore = compareAsc(startDate, newEndDate) === -1;

        if (isStartDayBefore) {
          setEndDate(newEndDate);
          setStartDateError('');
          setEndDateError(false);
        } else {
          setEndDateError(true);
        }
      }
    }
  }), /*#__PURE__*/React.createElement(Button, {
    variant: "primary",
    type: "button",
    onClick: apply,
    disabled: !!hasStartDateError || !!hasEndDateError
  }, translations.apply));
};
//# sourceMappingURL=InputsPanel.js.map