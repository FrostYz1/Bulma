function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import styled from 'styled-components';
import addMonths from 'date-fns/addMonths';
import { mq, rem } from '@heathmont/moon-utils';
import IconChevronLeft from '../../private/icons/IconChevronLeft';
import IconChevronRight from '../../private/icons/IconChevronRight';
import { Month } from './Month';
import { Sidebar } from './Sidebar';
import { InputsPanel } from './InputsPanel';
var PickerContainer = styled.div.withConfig({
  displayName: "Picker__PickerContainer",
  componentId: "sc-1yiyb5l-0"
})(function (_ref) {
  var _ref2;

  var _ref$theme = _ref.theme,
      color = _ref$theme.color,
      space = _ref$theme.space,
      radius = _ref$theme.radius,
      breakpoint = _ref$theme.breakpoint,
      zIndex = _ref$theme.zIndex;
  return _ref2 = {
    width: 'fit-content',
    position: 'absolute',
    zIndex: zIndex.dialog,
    display: 'grid',
    gridTemplateAreas: "\n      \"sidebar\"\n      \"firstMonth\"\n      \"secondMonth\"\n      \"inputs\"\n    ",
    alignItems: 'center'
  }, _defineProperty(_ref2, mq(breakpoint.medium), {
    gridTemplateAreas: "\n        \"sidebar firstMonth secondMonth\"\n        \"sidebar  inputs     inputs\"\n      ",
    gridTemplateColumns: '2fr 3fr 3fr',
    alignItems: 'baseline'
  }), _defineProperty(_ref2, "paddingBottom", rem(space["default"])), _defineProperty(_ref2, "gap", rem(space["default"])), _defineProperty(_ref2, "borderRadius", rem(radius["default"])), _defineProperty(_ref2, "padding", space.small), _defineProperty(_ref2, "backgroundColor", color.goku[100]), _defineProperty(_ref2, "boxShadow", "4px 4px 12px ".concat(color.hit[80], ",\n      0px 10px 18px ").concat(color.hit[80])), _defineProperty(_ref2, "overflow", 'hidden'), _ref2;
});
var FirstMonth = styled.div.withConfig({
  displayName: "Picker__FirstMonth",
  componentId: "sc-1yiyb5l-1"
})({
  gridArea: 'firstMonth',
  maxWidth: rem(236),
  position: 'relative'
});
var SecondMonth = styled.div.withConfig({
  displayName: "Picker__SecondMonth",
  componentId: "sc-1yiyb5l-2"
})({
  gridArea: 'secondMonth',
  maxWidth: rem(236),
  position: 'relative'
});
var LeftArrow = styled(IconChevronLeft).withConfig({
  displayName: "Picker__LeftArrow",
  componentId: "sc-1yiyb5l-3"
})(function (_ref3) {
  var theme = _ref3.theme;
  return {
    cursor: 'pointer',
    color: theme.color.bulma[100],
    position: 'absolute',
    left: rem(16),
    fontSize: rem(16),
    top: rem(2)
  };
});
var RightArrow = styled(IconChevronRight).withConfig({
  displayName: "Picker__RightArrow",
  componentId: "sc-1yiyb5l-4"
})(function (_ref4) {
  var theme = _ref4.theme;
  return {
    cursor: 'pointer',
    color: theme.color.bulma[100],
    position: 'absolute',
    right: rem(16),
    fontSize: rem(16),
    top: rem(2)
  };
});
export var Picker = function Picker(_ref5) {
  var datesState = _ref5.datesState,
      labels = _ref5.labels,
      translations = _ref5.translations,
      config = _ref5.config,
      onDayClick = _ref5.onDayClick,
      onDayMouseEnter = _ref5.onDayMouseEnter,
      firstMonth = _ref5.firstMonth,
      secondMonth = _ref5.secondMonth,
      selectRange = _ref5.selectRange,
      nextMonth = _ref5.nextMonth,
      prevMonth = _ref5.prevMonth,
      setStartDate = _ref5.setStartDate,
      setEndDate = _ref5.setEndDate,
      onDateChange = _ref5.onDateChange,
      apply = _ref5.apply,
      reset = _ref5.reset;
  return /*#__PURE__*/React.createElement(PickerContainer, null, /*#__PURE__*/React.createElement(Sidebar, {
    range: datesState.range,
    selectRange: selectRange,
    translations: translations,
    config: config
  }), /*#__PURE__*/React.createElement(FirstMonth, null, /*#__PURE__*/React.createElement(LeftArrow, {
    onClick: prevMonth
  }), /*#__PURE__*/React.createElement(Month, {
    key: "first",
    monthDays: firstMonth,
    monthLabel: labels.firstMonthLabel,
    year: labels.firstMonthYearLabel,
    weekDayLabels: labels.weekDayLabels,
    onDayClick: onDayClick,
    onMouseEnter: onDayMouseEnter,
    cursorDate: datesState.cursorDate,
    startDate: datesState.startDate,
    endDate: datesState.endDate,
    hoveredDate: datesState.hoveredDate
  })), /*#__PURE__*/React.createElement(SecondMonth, null, /*#__PURE__*/React.createElement(RightArrow, {
    onClick: nextMonth
  }), /*#__PURE__*/React.createElement(Month, {
    key: "second",
    monthDays: secondMonth,
    monthLabel: labels.secondMonthLabel,
    year: labels.secondMonthYearLabel,
    weekDayLabels: labels.weekDayLabels,
    onDayClick: onDayClick,
    onMouseEnter: onDayMouseEnter,
    cursorDate: addMonths(datesState.cursorDate, 1),
    startDate: datesState.startDate,
    endDate: datesState.endDate,
    hoveredDate: datesState.hoveredDate
  })), /*#__PURE__*/React.createElement(InputsPanel, {
    reset: reset,
    startDate: datesState.startDate,
    endDate: datesState.endDate,
    setStartDate: setStartDate,
    setEndDate: setEndDate,
    onDateChange: onDateChange,
    translations: translations,
    apply: apply,
    config: config
  }));
};
//# sourceMappingURL=Picker.js.map