function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React from 'react';
import styled from 'styled-components';
import { enGB } from 'date-fns/locale';
import { Button } from '..';
import RangeCalendar from './RangeCalendar';
import { getPlaceholder } from './private/helpers/getPlaceholder';
var Wrapper = styled.div.withConfig({
  displayName: "DateRangePicker__Wrapper",
  componentId: "sc-17xm3ab-0"
})({
  position: 'relative'
});

var DateRangePicker = function DateRangePicker(_ref) {
  var isOpenByDefault = _ref.isOpenByDefault,
      startDate = _ref.startDate,
      endDate = _ref.endDate,
      range = _ref.range,
      onDateChange = _ref.onDateChange,
      config = _ref.config,
      translations = _ref.translations;

  // const [ref, hasClickedOutside] = useClickOutside();
  var _React$useState = React.useState(isOpenByDefault),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      isOpen = _React$useState2[0],
      setIsOpen = _React$useState2[1];

  var _React$useState3 = React.useState(getPlaceholder({
    startDate: startDate,
    endDate: endDate,
    range: range,
    config: config,
    translations: translations
  })),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      placeholder = _React$useState4[0],
      setPlaceholder = _React$useState4[1];

  return /*#__PURE__*/React.createElement(Wrapper, null, /*#__PURE__*/React.createElement(Button, {
    variant: "tertiary",
    onClick: function onClick() {
      return setIsOpen(true);
    }
  }, placeholder), isOpen && /*#__PURE__*/React.createElement(RangeCalendar, {
    startDate: startDate,
    endDate: endDate,
    range: range,
    config: config,
    onDateChange: onDateChange,
    translations: translations // hasClickedOutside={hasClickedOutside}
    ,
    setIsOpen: setIsOpen,
    setPlaceholder: setPlaceholder
  }));
};

DateRangePicker.defaultProps = {
  range: '',
  isOpenByDefault: false,
  translations: {
    placeholder: 'Select Dates',
    apply: 'Apply',
    reset: 'Reset',
    lastMonth: 'Last month',
    lastWeek: 'Last week',
    last24hours: 'Last 24 hours',
    yesterday: 'Yesterday',
    today: 'Today',
    tomorrow: 'Tomorrow',
    thisWeek: 'This week',
    nextWeek: 'Next week',
    thisMonth: 'This month',
    nextMonth: 'Next month'
  },
  config: {
    format: "yyyy-MM-dd'T'HH:mm",
    monthLabelFormat: 'MMMM',
    yearLabelFormat: 'yyyy',
    weekStartsOn: 1,
    withHoursAndMinutes: true,
    onlyFuture: false,
    without24AndToday: false,
    locale: enGB
  }
};
export default DateRangePicker;
//# sourceMappingURL=DateRangePicker.js.map