var _excluded = ["scrollLeftCaption", "disabled"],
    _excluded2 = ["scrollRightCaption", "disabled"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import styled from 'styled-components';
import IconChevronLeft from '../private/icons/IconChevronLeft';
import Reel from '../reel/Reel';
import { withHorizontalScroll } from '../withHorizontalScroll/withHorizontalScroll';
import { CarouselControl, CarouselControlCaption } from './control';
import { rem } from '@heathmont/moon-utils';
/**
 * Settings
 *
 * If a browser supports the new scroll snap specification, use the styles
 * and disable legacy spec (keyed with ðŸ‘´)
 */

var currentScrollingSpec = '@supports (scroll-snap-align: start)';
/**
 * Carousel
 *
 * The outer Carousel container, allowing absolute positioning inside.
 *
 * `<any>` justification: https://coingaming.atlassian.net/browse/SPO-4963.
 */

var CarouselWrapper = styled.div.withConfig({
  displayName: "Carousel__CarouselWrapper",
  componentId: "xel9ev-0"
})({
  position: 'relative',
  width: '100%'
});
/**
 * Carousel Scroll
 *
 * The list of Carousel Items, controlling overflow and scroll behavior.
 */

var ItemsScrollWrapper = styled(Reel.withComponent('ul')).withConfig({
  displayName: "Carousel__ItemsScrollWrapper",
  componentId: "xel9ev-1"
})(function (_ref) {
  var horizontalEdgeGap = _ref.horizontalEdgeGap;
  return horizontalEdgeGap && {
    padding: "0 ".concat(rem(horizontalEdgeGap)),
    margin: "0 ".concat(rem(-horizontalEdgeGap))
  };
}, function (_ref2) {
  var hideScrollbar = _ref2.hideScrollbar;
  return hideScrollbar && {
    '&::-webkit-scrollbar': {
      display: 'none'
    },
    '-ms-overflow-style': 'none',
    scrollbarWidth: 'none'
  };
}, _defineProperty({
  scrollSnapType: 'mandatory',
  scrollSnapDestination: '0 50%',
  scrollSnapPointsX: 'repeat(100%)'
}, currentScrollingSpec, {
  scrollSnapType: 'x mandatory',
  scrollSnapDestination: 'unset'
  /* ðŸ‘´ */
  ,
  scrollSnapPointsX: 'unset'
  /* ðŸ‘´ */

}));
ItemsScrollWrapper.defaultProps = {
  space: 'default'
};
/**
 * Carousel Scroll Item
 *
 * The individual `list-item` of Carousel Scroll
 */

var CarouselScrollItem = styled.li.withConfig({
  displayName: "Carousel__CarouselScrollItem",
  componentId: "xel9ev-2"
})(_defineProperty({
  scrollSnapCoordinate: '0 0'
}, currentScrollingSpec, {
  scrollSnapAlign: 'center',
  scrollSnapCoordinate: 'unset'
  /* ðŸ‘´ */

}));

var DefaultScrollToLeftButton = function DefaultScrollToLeftButton(_ref3) {
  var _ref3$scrollLeftCapti = _ref3.scrollLeftCaption,
      scrollLeftCaption = _ref3$scrollLeftCapti === void 0 ? 'Scroll Left' : _ref3$scrollLeftCapti,
      _ref3$disabled = _ref3.disabled,
      disabled = _ref3$disabled === void 0 ? false : _ref3$disabled,
      rest = _objectWithoutProperties(_ref3, _excluded);

  return disabled ? null : /*#__PURE__*/React.createElement(CarouselControl, rest, /*#__PURE__*/React.createElement(CarouselControlCaption, null, scrollLeftCaption), /*#__PURE__*/React.createElement(IconChevronLeft, null));
};

var DefaultScrollToRightButton = function DefaultScrollToRightButton(_ref4) {
  var _ref4$scrollRightCapt = _ref4.scrollRightCaption,
      scrollRightCaption = _ref4$scrollRightCapt === void 0 ? 'Scroll Right' : _ref4$scrollRightCapt,
      _ref4$disabled = _ref4.disabled,
      disabled = _ref4$disabled === void 0 ? false : _ref4$disabled,
      rest = _objectWithoutProperties(_ref4, _excluded2);

  return disabled ? null : /*#__PURE__*/React.createElement(CarouselControl, rest, /*#__PURE__*/React.createElement(CarouselControlCaption, null, scrollRightCaption), /*#__PURE__*/React.createElement(IconChevronLeft, null));
};

var Carousel = function Carousel(_ref5) {
  var items = _ref5.items,
      step = _ref5.step,
      scrollTo = _ref5.scrollTo,
      scrollToLeftButton = _ref5.scrollToLeftButton,
      scrollToRightButton = _ref5.scrollToRightButton,
      scrollLeftCaption = _ref5.scrollLeftCaption,
      scrollRightCaption = _ref5.scrollRightCaption,
      space = _ref5.space,
      horizontalEdgeGap = _ref5.horizontalEdgeGap,
      hideScrollbar = _ref5.hideScrollbar;

  var _withHorizontalScroll = withHorizontalScroll({
    scrollStep: step || 5
  }),
      itemRef = _withHorizontalScroll.itemRef,
      scrollLeftToStep = _withHorizontalScroll.scrollLeftToStep,
      scrollRightToStep = _withHorizontalScroll.scrollRightToStep,
      containerRef = _withHorizontalScroll.containerRef,
      scrollToIndex = _withHorizontalScroll.scrollToIndex,
      canScrollLeft = _withHorizontalScroll.canScrollLeft,
      canScrollRight = _withHorizontalScroll.canScrollRight,
      firstVisibleIndex = _withHorizontalScroll.firstVisibleIndex,
      lastVisibleIndex = _withHorizontalScroll.lastVisibleIndex;

  React.useEffect(function () {
    if (!scrollTo) {
      return;
    } // We scroll for another extra item because we defined our THRESHOLD = 0.75;
    // It means that item will be visible for 75%.
    // We scroll one more to guarantee 100% visibility.
    // "items.length - 1" because indices start from 0.


    if (scrollTo && scrollTo < items.length - 1) {
      scrollToIndex(scrollTo + 1);
    } // No point for scroll another extra item because that's the last one


    if (scrollTo && scrollTo === items.length - 1) {
      scrollToIndex(scrollTo);
    }
  }, []);
  return /*#__PURE__*/React.createElement(CarouselWrapper, null, scrollToLeftButton ? scrollToLeftButton({
    scrollToStep: scrollLeftToStep,
    disabled: !canScrollLeft
  }) : /*#__PURE__*/React.createElement(DefaultScrollToLeftButton, {
    onClick: scrollLeftToStep,
    disabled: !canScrollLeft,
    scrollLeftCaption: scrollLeftCaption
  }), /*#__PURE__*/React.createElement(ItemsScrollWrapper, {
    space: space,
    ref: containerRef,
    horizontalEdgeGap: horizontalEdgeGap,
    hideScrollbar: hideScrollbar
  }, typeof items === 'function' ? items({
    firstVisibleIndex: firstVisibleIndex,
    lastVisibleIndex: lastVisibleIndex
  }).map(function (item, index) {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React.createElement(CarouselScrollItem, {
        key: index,
        ref: itemRef
      }, item)
    );
  }) : items.map(function (item, index) {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React.createElement(CarouselScrollItem, {
        key: index,
        ref: itemRef
      }, item)
    );
  })), scrollToRightButton ? scrollToRightButton({
    scrollToStep: scrollRightToStep,
    disabled: !canScrollRight
  }) : /*#__PURE__*/React.createElement(DefaultScrollToRightButton, {
    onClick: scrollRightToStep,
    disabled: !canScrollRight,
    scrollRightCaption: scrollRightCaption
  }));
};

export default Carousel;
//# sourceMappingURL=Carousel.js.map