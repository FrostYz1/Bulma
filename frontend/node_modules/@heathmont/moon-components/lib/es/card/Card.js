function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import styled from 'styled-components';
import padding from 'polished/lib/shorthands/padding';
import { inlineSvg, rem } from '@heathmont/moon-utils';
import { cardGradientSizes } from './utils'; // type CardBackgroundIcon = InlineSVGProps | false | undefined;

var backgroundSvg = function backgroundSvg(backgroundIcon) {
  return backgroundIcon && React.isValidElement(backgroundIcon) && {
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    backgroundImage: inlineSvg(React.cloneElement(backgroundIcon, {
      /**
       * By setting the icon to white with `0.05` opacity, we can use
       * background-blend-mode to exclude it from the background, whatever
       * the color may be.
       */
      color: 'rgba(255, 255, 255, 0.05)'
    }))
  };
};

/**
 * Component
 */
var Card = styled.div.withConfig({
  displayName: "Card",
  componentId: "sc-16yj75u-0"
})(function (_ref) {
  var active = _ref.active,
      backgroundIcon = _ref.backgroundIcon,
      flex = _ref.flex,
      template = _ref.template,
      _ref$theme = _ref.theme,
      border = _ref$theme.border,
      color = _ref$theme.color,
      radius = _ref$theme.radius,
      space = _ref$theme.space;
  return [_objectSpread(_objectSpread({
    display: 'block',
    minHeight: rem(168)
  }, padding(rem(space["default"]), rem(space.medium))), {}, {
    position: 'relative',
    borderRadius: rem(radius["default"]),
    border: border,
    borderColor: 'transparent'
  }), active && {
    borderColor: color.piccolo[100]
  }, flex && {
    display: 'flex',
    flexDirection: 'column',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    alignItems: 'alignContent'
  }, template && {
    front: [{
      backgroundColor: color.gohan[100]
    }, backgroundIcon && _objectSpread(_objectSpread({
      backgroundRepeat: 'no-repeat',
      backgroundBlendMode: 'exclusion'
    }, backgroundSvg(backgroundIcon)), {}, {
      backgroundSize: "auto 50%, ".concat(cardGradientSizes),
      backgroundPosition: "center right ".concat(rem(space["default"]))
    })],
    outline: {
      backgroundColor: color.goku[100],
      borderColor: color.beerus[100]
    }
  }[template]];
});
Card.defaultProps = {
  template: 'front'
};
export default Card;
//# sourceMappingURL=Card.js.map