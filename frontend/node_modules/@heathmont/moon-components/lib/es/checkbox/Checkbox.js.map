{"version":3,"sources":["../../../src/checkbox/Checkbox.tsx"],"names":["React","forwardRef","styled","hideVisually","uniqueId","inlineSvg","rem","inputColors","inputBorderWidth","CheckboxIcon","checkboxSize","theme","space","checkboxGap","xsmall","captionMargin","CheckboxLabel","label","display","position","alignItems","minHeight","CheckboxCaption","span","dir","marginRight","marginLeft","color","content","width","height","top","right","left","transitionDuration","transitionTimingFunction","backgroundColor","borderRadius","opacity","transform","transitionProperty","willChange","border","trunks","CheckboxInput","input","cursor","backgroundImage","goten","backgroundRepeat","backgroundPosition","backgroundSize","piccolo","borderColor","Checkbox","props","ref","disabled","ariaLabel","id","inputProps","autoId"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport hideVisually from 'polished/lib/mixins/hideVisually';\nimport { uniqueId, inlineSvg, rem } from '@heathmont/moon-utils';\nimport { Theme } from '@heathmont/moon-themes';\n\nimport { LabelText } from '../private/label/label';\nimport { inputColors, inputBorderWidth } from '../private/input/settings';\n\nimport { CheckboxIcon } from './private/icon';\n\nconst checkboxSize = (theme: Theme) => theme.space.default;\nconst checkboxGap = (theme: Theme) => theme.space.xsmall * 3;\nconst captionMargin = (theme: Theme) =>\n  rem(checkboxSize(theme) + checkboxGap(theme));\n\n/**\n * Checkbox Container\n *\n * Behaves as the outer interactive element of our checkbox input and label\n * content (set inside an additional `span`).\n *\n * 1. Prevents the label collapsing without text\n */\nconst CheckboxLabel = styled.label(({ theme }) => ({\n  display: 'inline-block',\n  position: 'relative',\n  alignItems: 'center',\n  minHeight: rem(checkboxSize(theme)) /* [1] */,\n}));\n\n/**\n * Checkbox Caption\n *\n * As styling of native checkboxes is limited, we use pseudo elements on the\n * caption to create a completely bespoke checkbox.\n * Interaction styles are handled by the prior adjacent hidden `input`.\n */\nconst CheckboxCaption = styled.span(({ theme, dir }) => ({\n  display: 'inline-block',\n  ...(dir === 'rtl'\n    ? { marginRight: captionMargin(theme) }\n    : { marginLeft: captionMargin(theme) }),\n  color: inputColors('label')(theme),\n  '&::before, &::after': {\n    content: '\"\"',\n    position: 'absolute',\n    width: rem(checkboxSize(theme)),\n    height: rem(checkboxSize(theme)),\n    top: rem(inputBorderWidth(theme)),\n    ...(dir === 'rtl' ? { right: 0 } : { left: 0 }),\n    transitionDuration: `${theme.transitionDuration.default}s`,\n    transitionTimingFunction: 'ease',\n  },\n  /* Pseudo Checkbox Circle */\n  '&::before': {\n    backgroundColor: inputColors('borderHover')(theme),\n    borderRadius: '50%',\n    opacity: 0,\n    transform: 'none',\n    transitionProperty: 'background-color, transform, opacity',\n    willChange: 'transform, opacity',\n  },\n  /* Psuedo Checkbox */\n  '&::after': {\n    border: `${rem(2)} solid ${theme.color.trunks[100]}`,\n    borderRadius: rem(2),\n    backgroundColor: 'transparent',\n    transitionProperty: 'border-color',\n  },\n}));\n\n/**\n * Checkbox Input\n *\n * Hides the default input and handles interaction styles of the custom pseudo\n * checkbox on CheckboxCaption.\n */\nconst CheckboxInput = styled.input(({ theme }) => ({\n  ...hideVisually(),\n  '& + span': {\n    cursor: 'pointer',\n    '&::after': {\n      backgroundImage: inlineSvg(\n        <CheckboxIcon color={theme.color.goten[100]} />,\n      ),\n      backgroundRepeat: 'no-repeat',\n      backgroundPosition: 'center',\n      backgroundSize: 0,\n    },\n  },\n  '&:hover:enabled, &:focus:enabled': {\n    /* Show the Pseudo Checkbox Circle */\n    '& + span::before': {\n      opacity: 0.5,\n      transform: 'scale(2)',\n    },\n    '&:checked + span::before': {\n      opacity: 0.1,\n      backgroundColor: theme.color.piccolo[100] /* [1] */,\n    },\n    /* Adjust the Pseudo Checkbox */\n    '&:not(:checked) + span::after': {\n      borderColor: theme.color.trunks[100],\n    },\n  },\n  /* Add the \"check\" to the Pseudo Checkbox */\n  '&:checked + span::after': {\n    backgroundColor: theme.color.piccolo[100],\n    backgroundSize: rem(10),\n    borderColor: theme.color.piccolo[100],\n  },\n  '&[disabled] + span': {\n    opacity: 0.5,\n    cursor: 'not-allowed',\n  },\n}));\n\n/**\n * Checkbox Component\n */\ntype CheckboxProps = React.InputHTMLAttributes<HTMLInputElement> & {\n  id?: string;\n  label?: LabelText;\n  ariaLabel?: string;\n  disabled?: boolean;\n  dir?: 'ltr' | 'rtl' | 'auto';\n};\n\nconst Checkbox = forwardRef<HTMLInputElement, CheckboxProps>((props, ref) => {\n  const {\n    disabled = false, ariaLabel, id, label, dir, ...inputProps\n  } = props;\n  const autoId = id || `Checkbox-${uniqueId()}`;\n  return (\n    <CheckboxLabel htmlFor={autoId}>\n      <CheckboxInput\n        id={autoId}\n        disabled={disabled}\n        type=\"checkbox\"\n        aria-label={ariaLabel}\n        ref={ref}\n        {...inputProps}\n      />\n      <CheckboxCaption dir={dir}>{label}</CheckboxCaption>\n    </CheckboxLabel>\n  );\n});\n\nexport type { CheckboxProps };\n\nexport default Checkbox;\n"],"file":"Checkbox.js"}