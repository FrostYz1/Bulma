var _excluded = ["disabled", "ariaLabel", "id", "label", "dir"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { forwardRef } from 'react';
import styled from 'styled-components';
import hideVisually from 'polished/lib/mixins/hideVisually';
import { uniqueId, inlineSvg, rem } from '@heathmont/moon-utils';
import { inputColors, inputBorderWidth } from '../private/input/settings';
import { CheckboxIcon } from './private/icon';

var checkboxSize = function checkboxSize(theme) {
  return theme.space["default"];
};

var checkboxGap = function checkboxGap(theme) {
  return theme.space.xsmall * 3;
};

var captionMargin = function captionMargin(theme) {
  return rem(checkboxSize(theme) + checkboxGap(theme));
};
/**
 * Checkbox Container
 *
 * Behaves as the outer interactive element of our checkbox input and label
 * content (set inside an additional `span`).
 *
 * 1. Prevents the label collapsing without text
 */


var CheckboxLabel = styled.label.withConfig({
  displayName: "Checkbox__CheckboxLabel",
  componentId: "sc-1ig52xa-0"
})(function (_ref) {
  var theme = _ref.theme;
  return {
    display: 'inline-block',
    position: 'relative',
    alignItems: 'center',
    minHeight: rem(checkboxSize(theme))
    /* [1] */

  };
});
/**
 * Checkbox Caption
 *
 * As styling of native checkboxes is limited, we use pseudo elements on the
 * caption to create a completely bespoke checkbox.
 * Interaction styles are handled by the prior adjacent hidden `input`.
 */

var CheckboxCaption = styled.span.withConfig({
  displayName: "Checkbox__CheckboxCaption",
  componentId: "sc-1ig52xa-1"
})(function (_ref2) {
  var theme = _ref2.theme,
      dir = _ref2.dir;
  return _objectSpread(_objectSpread({
    display: 'inline-block'
  }, dir === 'rtl' ? {
    marginRight: captionMargin(theme)
  } : {
    marginLeft: captionMargin(theme)
  }), {}, {
    color: inputColors('label')(theme),
    '&::before, &::after': _objectSpread(_objectSpread({
      content: '""',
      position: 'absolute',
      width: rem(checkboxSize(theme)),
      height: rem(checkboxSize(theme)),
      top: rem(inputBorderWidth(theme))
    }, dir === 'rtl' ? {
      right: 0
    } : {
      left: 0
    }), {}, {
      transitionDuration: "".concat(theme.transitionDuration["default"], "s"),
      transitionTimingFunction: 'ease'
    }),

    /* Pseudo Checkbox Circle */
    '&::before': {
      backgroundColor: inputColors('borderHover')(theme),
      borderRadius: '50%',
      opacity: 0,
      transform: 'none',
      transitionProperty: 'background-color, transform, opacity',
      willChange: 'transform, opacity'
    },

    /* Psuedo Checkbox */
    '&::after': {
      border: "".concat(rem(2), " solid ").concat(theme.color.trunks[100]),
      borderRadius: rem(2),
      backgroundColor: 'transparent',
      transitionProperty: 'border-color'
    }
  });
});
/**
 * Checkbox Input
 *
 * Hides the default input and handles interaction styles of the custom pseudo
 * checkbox on CheckboxCaption.
 */

var CheckboxInput = styled.input.withConfig({
  displayName: "Checkbox__CheckboxInput",
  componentId: "sc-1ig52xa-2"
})(function (_ref3) {
  var theme = _ref3.theme;
  return _objectSpread(_objectSpread({}, hideVisually()), {}, {
    '& + span': {
      cursor: 'pointer',
      '&::after': {
        backgroundImage: inlineSvg( /*#__PURE__*/React.createElement(CheckboxIcon, {
          color: theme.color.goten[100]
        })),
        backgroundRepeat: 'no-repeat',
        backgroundPosition: 'center',
        backgroundSize: 0
      }
    },
    '&:hover:enabled, &:focus:enabled': {
      /* Show the Pseudo Checkbox Circle */
      '& + span::before': {
        opacity: 0.5,
        transform: 'scale(2)'
      },
      '&:checked + span::before': {
        opacity: 0.1,
        backgroundColor: theme.color.piccolo[100]
        /* [1] */

      },

      /* Adjust the Pseudo Checkbox */
      '&:not(:checked) + span::after': {
        borderColor: theme.color.trunks[100]
      }
    },

    /* Add the "check" to the Pseudo Checkbox */
    '&:checked + span::after': {
      backgroundColor: theme.color.piccolo[100],
      backgroundSize: rem(10),
      borderColor: theme.color.piccolo[100]
    },
    '&[disabled] + span': {
      opacity: 0.5,
      cursor: 'not-allowed'
    }
  });
});
/**
 * Checkbox Component
 */

var Checkbox = forwardRef(function (props, ref) {
  var _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      ariaLabel = props.ariaLabel,
      id = props.id,
      label = props.label,
      dir = props.dir,
      inputProps = _objectWithoutProperties(props, _excluded);

  var autoId = id || "Checkbox-".concat(uniqueId());
  return /*#__PURE__*/React.createElement(CheckboxLabel, {
    htmlFor: autoId
  }, /*#__PURE__*/React.createElement(CheckboxInput, _extends({
    id: autoId,
    disabled: disabled,
    type: "checkbox",
    "aria-label": ariaLabel,
    ref: ref
  }, inputProps)), /*#__PURE__*/React.createElement(CheckboxCaption, {
    dir: dir
  }, label));
});
export default Checkbox;
//# sourceMappingURL=Checkbox.js.map