var _excluded = ["type", "disabled", "placeholder", "label", "error", "rounded", "dir"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { Label } from '../private/label/label';
import { Input } from './Input';
import { InputError } from './Error';
/**
 * Types & Settings
 */

var TextInputElem = styled(Input).withConfig({
  displayName: "TextInput__TextInputElem",
  componentId: "xu44xk-0"
})(function (_ref) {
  var error = _ref.error,
      color = _ref.theme.color;
  return {
    '&:focus': {
      borderColor: !error ? color.piccolo[100] : color.chiChi[100],
      outline: 'none'
    }
  };
});
/**
 * Component
 *
 * 1. Leaving the placeholder as an empty string by default allows us to float
 *    the label when a user starts typing, even if a placeholder isn't defined.
 */

var TextInput = forwardRef(function (props, ref) {
  var _props$type = props.type,
      type = _props$type === void 0 ? 'text' : _props$type,
      disabled = props.disabled,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? ' ' : _props$placeholder,
      label = props.label,
      error = props.error,
      rounded = props.rounded,
      dir = props.dir,
      rest = _objectWithoutProperties(props, _excluded);

  var inputProps = _objectSpread({
    disabled: disabled,
    type: type,
    placeholder: placeholder,
    rounded: rounded,
    dir: dir
  }, rest);

  var TextInputInner = function TextInputInner() {
    return /*#__PURE__*/React.createElement(TextInputElem, _extends({
      rounded: !!rounded,
      error: !!error,
      ref: ref,
      dir: dir
    }, inputProps));
  };

  if (!label) {
    return TextInputInner();
  }

  return /*#__PURE__*/React.createElement(Label, {
    dir: dir,
    text: label,
    disabled: disabled
  }, /*#__PURE__*/React.createElement(React.Fragment, null, TextInputInner(), error && /*#__PURE__*/React.createElement(InputError, null, error)));
});
export default TextInput;
//# sourceMappingURL=TextInput.js.map