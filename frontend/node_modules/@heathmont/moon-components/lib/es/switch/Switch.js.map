{"version":3,"sources":["../../../src/switch/Switch.tsx"],"names":["React","styled","rem","uniqueId","inlineSvg","hideVisually","IconMoon","IconSun","Inline","Caption","switchWidthProperty","switchWidth","switchHeightProperty","switchHeight","Slider","span","colorScheme","theme","color","themeColorScheme","space","transitionDuration","position","width","height","top","left","right","bottom","cursor","backgroundColor","gohan","backgroundImage","undefined","backgroundPosition","small","backgroundRepeat","borderRadius","transitionProperty","slow","transitionTimingFunction","content","xsmall","goku","trunks","transition","willChange","Label","label","large","Input","input","piccolo","goten","transform","defaultProps","type","SwitchCaption","checked","bulma","Switch","className","captionChecked","captionUnchecked","id","props","autoId","labelProps","inputProps","sliderProps","overflow"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { rem, uniqueId, inlineSvg } from '@heathmont/moon-utils';\nimport hideVisually from 'polished/lib/mixins/hideVisually';\n\nimport IconMoon from '../private/icons/IconMoon';\nimport IconSun from '../private/icons/IconSun';\nimport Inline from '../inline/Inline';\nimport Caption from '../caption/Caption';\n\nconst switchWidthProperty = '--switch-width';\nconst switchWidth = `var(${switchWidthProperty})`;\n\nconst switchHeightProperty = '--switch-height';\nconst switchHeight = `var(${switchHeightProperty})`;\n\ntype SliderColorScheme = {\n  colorScheme?: boolean;\n};\n\nconst Slider = styled.span<SliderColorScheme>(\n  ({\n    colorScheme,\n    theme: {\n      color, colorScheme: themeColorScheme, space, transitionDuration,\n    },\n  }) => ({\n    position: 'absolute',\n    width: switchWidth,\n    height: switchHeight,\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    cursor: 'pointer',\n    backgroundColor: color.gohan[100],\n    backgroundImage: colorScheme\n      ? `${inlineSvg(<IconMoon />)}, ${inlineSvg(<IconSun />)}`\n      : undefined,\n    backgroundPosition: `left ${rem(space.small)} center, right ${rem(\n      space.small,\n    )} center`,\n    backgroundRepeat: 'no-repeat',\n    borderRadius: `calc(${switchWidth} + ${rem(2)})`,\n    transitionProperty: 'background-color',\n    transitionDuration: `${transitionDuration.slow}s`,\n    transitionTimingFunction: 'ease',\n    '&::before': {\n      '--switch-indicator-size': `calc(${switchHeight} - ${rem(space.small)})`,\n      content: '\"\"',\n      position: 'absolute',\n      width: 'var(--switch-indicator-size)',\n      height: 'var(--switch-indicator-size)',\n      left: rem(space.xsmall),\n      bottom: rem(space.xsmall),\n      backgroundColor: themeColorScheme ? color.goku[100] : color.trunks[100],\n      borderRadius: '50%',\n      transition: 'inherit',\n      transitionProperty: 'background-color, transform',\n      willChange: 'transform',\n    },\n  }),\n);\n\nconst Label = styled.label(({ theme: { space } }) => ({\n  [switchWidthProperty]: rem(space.large * 2),\n  [switchHeightProperty]: rem(space.large),\n  position: 'relative',\n  display: 'inline-block',\n  width: switchWidth,\n  height: switchHeight,\n  flexShrink: 0,\n}));\n\nconst Input = styled.input<SliderColorScheme>(\n  ({ colorScheme, theme: { color } }) => ({\n    ...hideVisually(),\n    [`&:checked + ${Slider}`]: {\n      backgroundColor: colorScheme ? undefined : color.piccolo[100],\n      '&::before': {\n        backgroundColor: colorScheme ? undefined : color.goten[100],\n        transform: `translateX(calc(${switchWidth} / 2))`,\n      },\n    },\n  }),\n);\n\nInput.defaultProps = {\n  type: 'checkbox',\n};\n\nconst SwitchCaption = styled(Caption as any)<{ checked: boolean }>(\n  ({ checked, theme: { color, transitionDuration } }) => [\n    { transition: `color ${transitionDuration.default}s` },\n    checked && {\n      color: checked ? color.trunks[100] : color.bulma[100],\n    },\n  ],\n);\n\ntype HTMLInputProps = React.InputHTMLAttributes<HTMLInputElement>;\n\nexport type SwitchProps = {\n  checked?: boolean;\n  className?: string;\n  captionUnchecked?: string;\n  captionChecked?: string;\n  id?: HTMLInputProps['id'];\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n} & SliderColorScheme;\n\nconst Switch: React.FC<SwitchProps> = ({\n  className,\n  captionChecked,\n  captionUnchecked,\n  checked = false,\n  colorScheme,\n  id,\n  ...props\n}) => {\n  const autoId = id || `Switch-${uniqueId()}`;\n\n  const labelProps = {\n    className,\n  };\n\n  const inputProps = {\n    id: autoId,\n    colorScheme,\n    checked,\n    ...props,\n  };\n\n  const sliderProps = { colorScheme };\n\n  if (!captionUnchecked && !captionChecked) {\n    return (\n      <Label {...labelProps}>\n        <Input {...inputProps} />\n        <Slider {...sliderProps} />\n      </Label>\n    );\n  }\n\n  return (\n    <Inline space=\"small\" style={{ overflow: 'visible' }}>\n      {captionUnchecked && (\n        <SwitchCaption checked={checked}>{captionUnchecked}</SwitchCaption>\n      )}\n      <Label {...labelProps}>\n        <Input {...inputProps} />\n        <Slider {...sliderProps} />\n      </Label>\n      {captionChecked && (\n        <SwitchCaption checked={!checked}>{captionChecked}</SwitchCaption>\n      )}\n    </Inline>\n  );\n};\n\nexport default Switch;\n"],"file":"Switch.js"}