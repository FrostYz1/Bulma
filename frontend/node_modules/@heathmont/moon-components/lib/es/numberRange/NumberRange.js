import React from 'react';
import styled from 'styled-components';
import { rem } from '@heathmont/moon-utils';
import TextInput from '../textInput/TextInput';
import Text from '../text/Text';
import Stack from '../stack/Stack';
var Container = styled.div.withConfig({
  displayName: "NumberRange__Container",
  componentId: "sc-1hlq9gz-0"
})(function (_ref) {
  var _ref$theme = _ref.theme,
      color = _ref$theme.color,
      space = _ref$theme.space,
      radius = _ref$theme.radius,
      boxShadow = _ref$theme.boxShadow;
  return {
    background: color.gohan[100],
    padding: rem(space["default"]),
    borderRadius: rem(radius["default"]),
    boxShadow: boxShadow,
    '& > :first-child': {
      marginBottom: rem(12)
    }
  };
});

var NumberRange = function NumberRange(_ref2) {
  var _ref2$text = _ref2.text,
      text = _ref2$text === void 0 ? 'Enter a minimum, maximum or range limit' : _ref2$text,
      _ref2$lteLabel = _ref2.lteLabel,
      lteLabel = _ref2$lteLabel === void 0 ? 'Max' : _ref2$lteLabel,
      _ref2$gteLabel = _ref2.gteLabel,
      gteLabel = _ref2$gteLabel === void 0 ? 'Min' : _ref2$gteLabel,
      _ref2$lteError = _ref2.lteError,
      lteError = _ref2$lteError === void 0 ? false : _ref2$lteError,
      _ref2$gteError = _ref2.gteError,
      gteError = _ref2$gteError === void 0 ? false : _ref2$gteError,
      _ref2$lteDisabled = _ref2.lteDisabled,
      lteDisabled = _ref2$lteDisabled === void 0 ? false : _ref2$lteDisabled,
      _ref2$gteDisabled = _ref2.gteDisabled,
      gteDisabled = _ref2$gteDisabled === void 0 ? false : _ref2$gteDisabled,
      value = _ref2.value,
      _onChange = _ref2.onChange,
      _ref2$maxWidth = _ref2.maxWidth,
      maxWidth = _ref2$maxWidth === void 0 ? 248 : _ref2$maxWidth;
  return /*#__PURE__*/React.createElement(Container, {
    style: {
      maxWidth: maxWidth
    }
  }, /*#__PURE__*/React.createElement(Text, {
    color: "trunks.100",
    size: 12
  }, text), /*#__PURE__*/React.createElement(Stack, null, /*#__PURE__*/React.createElement(TextInput, {
    type: "number",
    label: gteLabel,
    value: String(value.gte),
    disabled: gteDisabled,
    onChange: function onChange(e) {
      return _onChange({
        gte: Number(e.target.value),
        lte: value.lte
      });
    },
    error: gteError
  }), /*#__PURE__*/React.createElement(TextInput, {
    type: "number",
    label: lteLabel,
    value: String(value.lte),
    disabled: lteDisabled,
    onChange: function onChange(e) {
      return _onChange({
        lte: Number(e.target.value),
        gte: value.gte
      });
    },
    error: lteError
  })));
};

export default NumberRange;
//# sourceMappingURL=NumberRange.js.map