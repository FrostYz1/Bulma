function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
export var VIEWBOX_CENTER_X = 50;
export var VIEWBOX_CENTER_Y = 50;

var getPathDescription = function getPathDescription(pathRadius) {
  var center = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    x: VIEWBOX_CENTER_X,
    y: VIEWBOX_CENTER_Y
  };
  return "\n      M ".concat(center.x, ",").concat(center.y, "\n      m 0,-").concat(pathRadius, "\n      a ").concat(pathRadius, ",").concat(pathRadius, " 0 1 1 0,").concat(2 * pathRadius, "\n      a ").concat(pathRadius, ",").concat(pathRadius, " 0 1 1 0,-").concat(2 * pathRadius, "\n    ");
};

var getDashStyle = function getDashStyle(_ref) {
  var dashRatio = _ref.dashRatio,
      pathRadius = _ref.pathRadius;
  var circumference = Math.PI * 2 * pathRadius;
  var gapLength = (1 - dashRatio) * circumference;
  return {
    strokeDasharray: "".concat(circumference, "px ").concat(circumference, "px"),
    strokeDashoffset: "".concat(gapLength, "px")
  };
};

var Path = function Path(_ref2) {
  var dashRatio = _ref2.dashRatio,
      pathRadius = _ref2.pathRadius,
      strokeWidth = _ref2.strokeWidth,
      style = _ref2.style,
      center = _ref2.center;
  return /*#__PURE__*/React.createElement("path", {
    style: _objectSpread(_objectSpread({}, style), getDashStyle({
      pathRadius: pathRadius,
      dashRatio: dashRatio
    })),
    d: getPathDescription(pathRadius, center),
    strokeWidth: strokeWidth,
    fillOpacity: 0
  });
};

export default Path;
//# sourceMappingURL=Path.js.map