var _excluded = ["value", "strokeWidth"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { useTheme } from '@heathmont/moon-themes';
import Path from './Path';

var getPathRatio = function getPathRatio(value) {
  var minValue = 0;
  var maxValue = 100;
  var boundedValue = Math.min(Math.max(value, minValue), maxValue);
  return (boundedValue - minValue) / (maxValue - minValue);
};

var ProgressCircular = function ProgressCircular(_ref) {
  var value = _ref.value,
      _ref$strokeWidth = _ref.strokeWidth,
      strokeWidth = _ref$strokeWidth === void 0 ? 12 : _ref$strokeWidth,
      props = _objectWithoutProperties(_ref, _excluded);

  var VIEWBOX_WIDTH = 100;
  var VIEWBOX_HEIGHT = 100;
  var PATH_RADIUS = (VIEWBOX_HEIGHT - strokeWidth) / 2;

  var _useTheme = useTheme(),
      color = _useTheme.color;

  var pathRatio = getPathRatio(value);
  return /*#__PURE__*/React.createElement("svg", _extends({
    style: {
      width: '1em',
      height: '1em',
      verticalAlign: 'middle'
    },
    viewBox: "0 0 ".concat(VIEWBOX_WIDTH, " ").concat(VIEWBOX_HEIGHT)
  }, props), /*#__PURE__*/React.createElement(Path, {
    dashRatio: 1,
    pathRadius: PATH_RADIUS,
    strokeWidth: strokeWidth,
    style: {
      stroke: color.goku[80]
    }
  }), /*#__PURE__*/React.createElement(Path, {
    dashRatio: pathRatio,
    pathRadius: PATH_RADIUS,
    strokeWidth: strokeWidth,
    style: {
      stroke: color.piccolo[100],
      transition: value === 0 ? 'none' : 'stroke-dashoffset 0.5s ease 0s'
    }
  }));
};

export default ProgressCircular;
//# sourceMappingURL=ProgressCircular.js.map