function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { buttonActive, buttonHover } from './states';

/**
 * Styles that extend `buttonBase` to change the button's cosmetic appearance.
 * Accessed via `buttonVariant(key)(theme)`.
 *
 * For usage guidelines, see the README.
 */
var buttonVariant = function buttonVariant(key) {
  return function (_ref) {
    var color = _ref.color;
    var themedStyles = {
      primary: _objectSpread(_objectSpread({
        color: color.goten[100],
        backgroundColor: color.piccolo[100]
      }, buttonHover({
        backgroundColor: color.piccolo[80]
      })), buttonActive({
        backgroundColor: color.piccolo[120],
        outline: 'none'
      })),
      secondary: _objectSpread(_objectSpread({
        color: color.bulma[100],
        backgroundColor: color.hit[100]
      }, buttonHover({
        backgroundColor: color.hit[80]
      })), buttonActive({
        backgroundColor: color.hit[120],
        outline: 'none'
      })),
      tertiary: _objectSpread(_objectSpread({
        color: color.bulma[100],
        backgroundColor: 'transparent',
        border: "1px solid ".concat(color.bulma[100])
      }, buttonHover({
        backgroundColor: color.hit[80]
      })), buttonActive({
        backgroundColor: color.hit[120],
        outline: 'none'
      })),
      highlight: _objectSpread(_objectSpread({
        color: color.goten[100],
        backgroundColor: color.whis[100]
      }, buttonHover({
        opacity: 0.9
      })), buttonActive({
        opacity: 0.8,
        outline: 'none'
      })),
      "default": _objectSpread(_objectSpread({
        color: color.bulma[100],
        background: 'none'
      }, buttonHover({
        color: color.bulma[100]
      })), buttonActive({
        color: color.bulma[100],
        outline: 'none'
      }))
    };
    return themedStyles[key];
  };
};
/**
 * buttonShadow
 *
 * Removes user-agent `:focus` styles and generates a box-shadow using the
 * color provided.
 */


export var buttonShadow = function buttonShadow(color) {
  return function (_ref2) {
    var space = _ref2.space;
    return {
      outline: 'none',
      boxShadow: "0 0 ".concat(space["default"], "px ").concat(color)
    };
  };
};
export { buttonVariant };
export default {
  buttonVariant: buttonVariant
};
//# sourceMappingURL=variants.js.map