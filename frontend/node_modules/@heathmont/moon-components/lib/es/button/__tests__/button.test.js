import React from 'react';
import { create } from 'react-test-renderer';
import { sportsbetDark, ThemeProvider } from '@heathmont/moon-themes';
import 'jest-styled-components';
import Button from '../Button';

var renderWithTheme = function renderWithTheme(component) {
  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: sportsbetDark
  }, component);
};

describe('Button', function () {
  test('renders correctly', function () {
    var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
      variant: "primary"
    }, "Primary Button")));
    expect(button).toMatchSnapshot();
  });
  test('renders as fullWidth', function () {
    var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
      variant: "primary",
      fullWidth: true
    }, "Full Width Primary Button")));
    expect(button).toMatchSnapshot();
  });
  test('renders as disabled', function () {
    var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
      variant: "primary",
      disabled: true
    }, "Disabled Primary Button")));
    expect(button).toMatchSnapshot();
  });
  test('renders as an anchor tag', function () {
    var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
      variant: "primary",
      as: "a",
      href: "#some-anchor"
    }, "Primary Button (Anchor)")));
    expect(button).toMatchSnapshot();
  });
  describe('variants', function () {
    test('renders as primary', function () {
      var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
        variant: "primary"
      }, "Primary Button")));
      expect(button).toMatchSnapshot();
    });
    test('renders as highlight', function () {
      var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
        variant: "highlight"
      }, "Secondary Button")));
      expect(button).toMatchSnapshot();
    });
    test('renders as secondary', function () {
      var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
        variant: "secondary"
      }, "Secondary Button")));
      expect(button).toMatchSnapshot();
    });
    test('renders as default', function () {
      var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, null, "Default Button")));
      expect(button).toMatchSnapshot();
    });
    describe('variants MockStates', function () {
      test('Primary renders with hover', function () {
        var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
          variant: "primary",
          mockState: "hover"
        }, "Hover Primary Button")));
        expect(button).toMatchSnapshot();
      });
      test('Primary renders as active', function () {
        var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
          variant: "primary",
          mockState: "active"
        }, "Active Primary Button")));
        expect(button).toMatchSnapshot();
      });
      test('Highlight renders with hover', function () {
        var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
          variant: "highlight",
          mockState: "hover"
        }, "Hover Highlight Button")));
        expect(button).toMatchSnapshot();
      });
      test('Highlight renders as active', function () {
        var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
          variant: "highlight",
          mockState: "active"
        }, "Active Highlight Button")));
        expect(button).toMatchSnapshot();
      });
      test('Secondary renders with hover', function () {
        var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
          variant: "secondary",
          mockState: "hover"
        }, "Hover Secondary Button")));
        expect(button).toMatchSnapshot();
      });
      test('Secondary renders as active', function () {
        var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
          variant: "secondary",
          mockState: "active"
        }, "Active Secondary Button")));
        expect(button).toMatchSnapshot();
      });
      test('Default renders with hover', function () {
        var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
          mockState: "hover"
        }, "Hover Default Button")));
        expect(button).toMatchSnapshot();
      });
      test('Default renders as active', function () {
        var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
          mockState: "active"
        }, "Active Default Button")));
        expect(button).toMatchSnapshot();
      });
    });
  });
  describe('variants', function () {
    describe('variants MockStates', function () {
      test('Highlight outline renders as active', function () {
        var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
          variant: "highlight",
          mockState: "active"
        }, "Active Primary Button")));
        expect(button).toMatchSnapshot();
      });
      test('Secondary renders with hover', function () {
        var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
          variant: "secondary",
          mockState: "hover"
        }, "Hover Primary Button")));
        expect(button).toMatchSnapshot();
      });
      test('Secondary renders as active', function () {
        var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
          variant: "secondary",
          mockState: "active"
        }, "Active Primary Button")));
        expect(button).toMatchSnapshot();
      });
      test('Default renders with hover', function () {
        var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
          mockState: "hover"
        }, "Hover Default Button")));
        expect(button).toMatchSnapshot();
      });
      test('Default renders as active', function () {
        var button = create(renderWithTheme( /*#__PURE__*/React.createElement(Button, {
          mockState: "active"
        }, "Active Default Button")));
        expect(button).toMatchSnapshot();
      });
    });
  });
});
//# sourceMappingURL=button.test.js.map