function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { rem } from '@heathmont/moon-utils';
import React from 'react';
import styled from 'styled-components';
var List = styled.ul.withConfig({
  displayName: "SingleItemSelect__List",
  componentId: "oxrmn4-0"
})({
  overflow: 'auto',
  listStyle: 'none',
  padding: 0,
  margin: "0 -".concat(rem(12))
});
var Option = styled.button.withConfig({
  displayName: "SingleItemSelect__Option",
  componentId: "oxrmn4-1"
})(function (_ref) {
  var selected = _ref.selected,
      theme = _ref.theme;
  return _objectSpread({
    fontSize: rem(14),
    lineHeight: rem(20),
    padding: "".concat(rem(10), " ").concat(rem(12)),
    textDecoration: 'none',
    outline: 'none',
    display: 'block',
    border: 'none',
    textAlign: 'left',
    width: '100%',
    cursor: 'pointer'
  }, selected ? {
    color: theme.color.goten[100],
    backgroundColor: theme.color.piccolo[100]
  } : {
    color: theme.color.bulma[100],
    backgroundColor: 'transparent',
    '&:hover, &:focus': {
      backgroundColor: theme.color.goku[100]
    }
  });
});

var SingleItemSelect = function SingleItemSelect(_ref2) {
  var options = _ref2.options,
      value = _ref2.value,
      onChange = _ref2.onChange,
      maxHeight = _ref2.maxHeight;
  return /*#__PURE__*/React.createElement(List, {
    style: {
      maxHeight: maxHeight
    }
  }, options.map(function (option) {
    return /*#__PURE__*/React.createElement("li", {
      key: option.value
    }, /*#__PURE__*/React.createElement(Option, {
      selected: value === option.value,
      onClick: function onClick() {
        return onChange(option.value);
      }
    }, option.label));
  }));
};

SingleItemSelect.defaultProps = {
  maxHeight: 250
};
export default SingleItemSelect;
//# sourceMappingURL=SingleItemSelect.js.map