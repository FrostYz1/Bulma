function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import styled from 'styled-components';
import hideVisually from 'polished/lib/mixins/hideVisually';
import { focus, rem } from '@heathmont/moon-utils';
export var DialogToggle = styled.button.withConfig({
  displayName: "toggle__DialogToggle",
  componentId: "wtr74x-0"
})(function (_ref) {
  var _ref$theme = _ref.theme,
      border = _ref$theme.border,
      color = _ref$theme.color,
      opacity = _ref$theme.opacity,
      radius = _ref$theme.radius,
      space = _ref$theme.space;
  return _objectSpread(_objectSpread({
    position: 'absolute',
    top: rem(space["default"]),
    right: rem(space["default"]),
    padding: rem(space.small),
    verticalAlign: 'middle',
    fontSize: rem(space.small),
    lineHeight: 0,
    textDecoration: 'none',
    cursor: 'pointer',
    color: color.trunks[100],
    borderRadius: rem(radius.largest),
    border: border,
    borderColor: 'transparent',
    backgroundColor: color.gohan[100]
  }, focus(color.piccolo[100])), {}, {
    '&:disabled, &[disabled]': {
      cursor: 'not-allowed',
      opacity: opacity.disabled
    }
  });
});
export var DialogToggleText = styled.span.withConfig({
  displayName: "toggle__DialogToggleText",
  componentId: "wtr74x-1"
})(hideVisually);
//# sourceMappingURL=toggle.js.map