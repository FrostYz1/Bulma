function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import styled from 'styled-components';
import { rem } from '@heathmont/moon-utils';
import IconSearch from '../../../private/icons/IconSearch';
import { inputConfig, zIndex } from './settings';
var height = inputConfig.height,
    paddingX = inputConfig.paddingX,
    transition = inputConfig.transition;
var searchInputActive = ':focus:not(:placeholder-shown)';
export var SearchInputIcon = styled(IconSearch).withConfig({
  displayName: "Input__SearchInputIcon",
  componentId: "lo7z5g-0"
})(function (_ref) {
  var theme = _ref.theme;
  return {
    zIndex: zIndex.searchIcon,
    color: theme.color.trunks[100],
    position: 'absolute',
    fontSize: rem(theme.space["default"]),
    top: '50%',
    left: rem(theme.space["default"]),
    transform: 'translateY(-50%)'
  };
});
export var SearchInput = styled.input.withConfig({
  displayName: "Input__SearchInput",
  componentId: "lo7z5g-1"
})(function (_ref2) {
  var theme = _ref2.theme;
  var fontSize = theme.base.fontSize;
  return _defineProperty({
    fontWeight: theme.fontWeight.normal,
    fontSize: rem(fontSize),
    width: '100%',
    lineHeight: rem(height, fontSize),
    border: 0,
    position: 'relative',
    paddingTop: 0,
    paddingRight: rem(paddingX, fontSize),
    paddingBottom: 0,
    paddingLeft: rem(paddingX + theme.space["default"] + theme.space.small, fontSize),
    textOverflow: 'ellipsis',
    overflow: 'hidden',
    borderRadius: rem(theme.radius.largest),
    backgroundColor: theme.color.gohan[100],
    color: theme.color.trunks[100],
    zIndex: zIndex.searchInput,
    transition: "".concat(transition, ", max-width ease"),
    transitionDuration: "".concat(theme.transitionDuration["default"], "s"),
    '&::placeholder': {
      color: 'inherit'
    },
    '&:hover, &:focus': _defineProperty({
      color: theme.color.bulma[100]
    }, "+ ".concat(SearchInputIcon), {
      color: theme.color.piccolo[100]
    })
  }, "&".concat(searchInputActive), {
    zIndex: zIndex.searchInputActive,
    maxWidth: '100%'
  });
});
export var SearchInputActive = "".concat(SearchInput).concat(searchInputActive);
//# sourceMappingURL=Input.js.map