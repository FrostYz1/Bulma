var _excluded = ["placeholder", "label", "error", "id"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import hideVisually from 'polished/lib/mixins/hideVisually';
import { inlineSvg, rem } from '@heathmont/moon-utils';
import { Input } from '../private/input/input';
import { inputColors } from '../private/input/settings';
import IconUpload from '../private/icons/IconUpload';
/**
 * Types & Settings
 */

var labelID = function labelID(id) {
  return "".concat(id, "-label");
};
/**
 * Styles
 *
 * Styling <input type='file'/> is tricky. The `label` acts as the main
 * interaction, with the input visually hidden from the user.
 */


var FileInputLabel = styled.span.withConfig({
  displayName: "FileInput__FileInputLabel",
  componentId: "sc-1urkz9z-0"
})(function (_ref) {
  var theme = _ref.theme;
  return {
    display: 'block',
    fontSize: rem(16),
    color: inputColors('label')(theme),
    marginBottom: rem(theme.space.small)
  };
});
var FileInputElement = styled(Input.withComponent('label')).withConfig({
  displayName: "FileInput__FileInputElement",
  componentId: "sc-1urkz9z-1"
})(function (_ref2) {
  var error = _ref2.error,
      theme = _ref2.theme;
  return [{
    width: 'auto',
    position: 'relative',
    display: 'block',
    color: inputColors('label')(theme),
    cursor: 'pointer',
    backgroundImage: inlineSvg( /*#__PURE__*/React.createElement(IconUpload, {
      color: inputColors('label')(theme)
    })),
    '&:focus-within': {
      borderColor: inputColors('label')(theme)
    }
  }, error && {
    borderColor: theme.color.chiChi[100]
  }];
});
/**
 * Component
 */

var FileInput = function FileInput(_ref3) {
  var _ref3$placeholder = _ref3.placeholder,
      placeholder = _ref3$placeholder === void 0 ? 'Choose fileâ€¦' : _ref3$placeholder,
      label = _ref3.label,
      error = _ref3.error,
      id = _ref3.id,
      props = _objectWithoutProperties(_ref3, _excluded);

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FileInputLabel, {
    id: labelID(id)
  }, label), /*#__PURE__*/React.createElement(FileInputElement, {
    withIcon: true,
    error: error
  }, /*#__PURE__*/React.createElement("span", null, placeholder), /*#__PURE__*/React.createElement("input", _extends({
    id: id,
    type: "file",
    "aria-describedby": labelID(id),
    style: hideVisually()
  }, props))));
};

export default FileInput;
//# sourceMappingURL=FileInput.js.map