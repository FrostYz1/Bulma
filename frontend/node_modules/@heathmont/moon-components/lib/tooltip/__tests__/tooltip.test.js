"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactTestRenderer = require("react-test-renderer");

var _moonThemes = require("@heathmont/moon-themes");

require("jest-styled-components");

var _Tooltip = _interopRequireDefault(require("../Tooltip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var renderWithTheme = function renderWithTheme(component) {
  return /*#__PURE__*/_react["default"].createElement(_moonThemes.ThemeProvider, {
    theme: _moonThemes.sportsbetDark
  }, component);
};

var Caption = function Caption() {
  return /*#__PURE__*/_react["default"].createElement("p", null, "Hi, I'm a Tooltip");
};

var testProps = {
  id: 'test-id'
};
describe('Tooltip', function () {
  test('renders hidden and left-aligned by default', function () {
    var tooltip = (0, _reactTestRenderer.create)(renderWithTheme( /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], testProps, /*#__PURE__*/_react["default"].createElement(Caption, null))));
    expect(tooltip).toMatchSnapshot();
  });
  test('renders as active when defined', function () {
    var tooltip = (0, _reactTestRenderer.create)(renderWithTheme( /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], _extends({
      active: true
    }, testProps), /*#__PURE__*/_react["default"].createElement(Caption, null))));
    expect(tooltip).toMatchSnapshot();
  });
  describe('alignment', function () {
    test('right-aligned', function () {
      var tooltip = (0, _reactTestRenderer.create)(renderWithTheme( /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], _extends({
        active: true,
        align: "right"
      }, testProps), /*#__PURE__*/_react["default"].createElement(Caption, null))));
      expect(tooltip).toMatchSnapshot();
    });
  });
  describe('renders with close button if onClose handler was passed', function () {
    test('closeable', function () {
      var tooltip = (0, _reactTestRenderer.create)(renderWithTheme( /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], _extends({
        onClose: function onClose() {
          console.log('Closed');
        }
      }, testProps), /*#__PURE__*/_react["default"].createElement(Caption, null))));
      expect(tooltip).toMatchSnapshot();
    });
  });
  test('renders as an error', function () {
    var tooltip = (0, _reactTestRenderer.create)(renderWithTheme( /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], _extends({
      active: true,
      error: true
    }, testProps), /*#__PURE__*/_react["default"].createElement(Caption, null))));
    expect(tooltip).toMatchSnapshot();
  });
});
//# sourceMappingURL=tooltip.test.js.map