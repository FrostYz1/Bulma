"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.withHorizontalScroll = exports.THRESHOLD = void 0;

var _react = _interopRequireDefault(require("react"));

var _scrollIntoViewIfNeeded = _interopRequireDefault(require("scroll-into-view-if-needed"));

var _smoothScrollIntoViewIfNeeded = _interopRequireDefault(require("smooth-scroll-into-view-if-needed"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var THRESHOLD = 0.75;
exports.THRESHOLD = THRESHOLD;

var findLastVisibleIndex = function findLastVisibleIndex(childRefs) {
  var reversedIndex = childRefs // "reverse" mutates existing array, that's why we copy it via "slice"
  .slice().reverse().findIndex(function (child) {
    return child.getAttribute('visible');
  });
  var count = childRefs.length - 1;
  var finalIndex = reversedIndex >= 0 ? count - reversedIndex : reversedIndex;
  return finalIndex;
};

var findFirstVisibleIndex = function findFirstVisibleIndex(childRefs) {
  return childRefs.findIndex(function (child) {
    return child.getAttribute('visible');
  });
};

var _scrollToIndex = function scrollToIndex(itemRef, scrollIntoViewSmoothly, containerRef) {
  if (itemRef) {
    scrollIntoViewSmoothly(itemRef, {
      block: 'nearest',
      inline: 'nearest',
      behavior: 'smooth',
      boundary: containerRef
    });
  }
};

var _scrollLeftToStep = function scrollLeftToStep(scrollStep, itemRefs, scrollIntoViewSmoothly, containerRef) {
  var firstVisibleIndex = findFirstVisibleIndex(itemRefs);
  var actualScrollForIndex = firstVisibleIndex < scrollStep ? 0 : firstVisibleIndex - scrollStep;

  _scrollToIndex(itemRefs[actualScrollForIndex], scrollIntoViewSmoothly, containerRef);
};

var _scrollRightToStep = function scrollRightToStep(scrollStep, itemRefs, scrollIntoViewSmoothly, containerRef) {
  var lastVisibleIndex = findLastVisibleIndex(itemRefs);
  var lastIndex = itemRefs.length - 1;
  var actualScrollForIndex = lastIndex - lastVisibleIndex < scrollStep ? lastIndex : lastVisibleIndex + scrollStep;

  _scrollToIndex(itemRefs[actualScrollForIndex], scrollIntoViewSmoothly, containerRef);
};

var showHideIndicator = function showHideIndicator(itemRefs, setLeftIndicator, setRightIndicator, setFirstVisibleIndex, setLastVisibleIndex) {
  var firstVisibleIndex = findFirstVisibleIndex(itemRefs);
  var lastVisibleIndex = findLastVisibleIndex(itemRefs);
  setFirstVisibleIndex(firstVisibleIndex);
  setLastVisibleIndex(lastVisibleIndex);

  if (lastVisibleIndex === -1 && firstVisibleIndex === -1) {
    setLeftIndicator(false);
    setRightIndicator(false);
  }

  lastVisibleIndex < itemRefs.length - 1 ? setRightIndicator(true) : setRightIndicator(false);
  firstVisibleIndex > 0 ? setLeftIndicator(true) : setLeftIndicator(false);
};

var withHorizontalScroll = function withHorizontalScroll(options) {
  var _React$useState = _react["default"].useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      leftIndicator = _React$useState2[0],
      setLeftIndicator = _React$useState2[1];

  var _React$useState3 = _react["default"].useState(false),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      rightIndicator = _React$useState4[0],
      setRightIndicator = _React$useState4[1];

  var _React$useState5 = _react["default"].useState(-1),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      firstVisibleIndex = _React$useState6[0],
      setFirstVisibleIndex = _React$useState6[1];

  var _React$useState7 = _react["default"].useState(-1),
      _React$useState8 = _slicedToArray(_React$useState7, 2),
      lastVisibleIndex = _React$useState8[0],
      setLastVisibleIndex = _React$useState8[1];

  var containerRef = _react["default"].useRef(null);

  var scrollStep = options.scrollStep,
      scrollInContainer = options.scrollInContainer;
  var itemRefs = [];
  var scrollIntoViewSmoothly = _scrollIntoViewIfNeeded["default"];

  _react["default"].useEffect(function () {
    var observer = new IntersectionObserver(function (entries) {
      entries.forEach(function (entry) {
        entry.intersectionRatio >= THRESHOLD ? entry.target.setAttribute('visible', 'true') : entry.target.removeAttribute('visible');
        showHideIndicator(itemRefs, setLeftIndicator, setRightIndicator, setFirstVisibleIndex, setLastVisibleIndex);
      });
    }, {
      root: containerRef.current,
      threshold: THRESHOLD
    });
    itemRefs.forEach(function (item) {
      observer.observe(item);
    });
  }, []);

  _react["default"].useEffect(function () {
    if (document) {
      scrollIntoViewSmoothly = 'scrollBehavior' in document.documentElement.style ? _scrollIntoViewIfNeeded["default"] : _smoothScrollIntoViewIfNeeded["default"];
    }
  });

  var itemRef = function itemRef(element) {
    if (!element) {
      return;
    }

    itemRefs.push(element);
  };

  return {
    itemRef: itemRef,
    containerRef: containerRef,
    firstVisibleIndex: firstVisibleIndex,
    lastVisibleIndex: lastVisibleIndex,
    scrollLeftToStep: function scrollLeftToStep() {
      return _scrollLeftToStep(scrollStep || 0, itemRefs, scrollIntoViewSmoothly, scrollInContainer && containerRef && containerRef.current);
    },
    scrollRightToStep: function scrollRightToStep() {
      return _scrollRightToStep(scrollStep || 0, itemRefs, scrollIntoViewSmoothly, scrollInContainer && containerRef && containerRef.current);
    },
    scrollToIndex: function scrollToIndex(index) {
      return _scrollToIndex(itemRefs[index], scrollIntoViewSmoothly, scrollInContainer && containerRef && containerRef.current);
    },
    canScrollLeft: leftIndicator,
    canScrollRight: rightIndicator
  };
};

exports.withHorizontalScroll = withHorizontalScroll;
var _default = withHorizontalScroll;
exports["default"] = _default;
//# sourceMappingURL=withHorizontalScroll.js.map