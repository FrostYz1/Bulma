"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _moonUtils = require("@heathmont/moon-utils");

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Checkbox = _interopRequireDefault(require("../checkbox/Checkbox"));

var _Inline = _interopRequireDefault(require("../inline/Inline"));

var _Text = _interopRequireDefault(require("../text/Text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var List = _styledComponents["default"].ul.withConfig({
  displayName: "CheckboxMultiselect__List",
  componentId: "e8lanu-0"
})(function () {
  return {
    overflow: 'auto',
    listStyle: 'none',
    padding: 0,
    margin: "0 0 0 -".concat((0, _moonUtils.rem)(12))
  };
});

var Option = _styledComponents["default"].label.withConfig({
  displayName: "CheckboxMultiselect__Option",
  componentId: "e8lanu-1"
})(function (_ref) {
  var theme = _ref.theme;
  return {
    display: 'flex',
    flex: 1,
    alignItems: 'center',
    fontSize: (0, _moonUtils.rem)(14),
    lineHeight: (0, _moonUtils.rem)(20),
    padding: "".concat((0, _moonUtils.rem)(10), " ").concat((0, _moonUtils.rem)(12)),
    margin: 0,
    textDecoration: 'none',
    outline: 'none',
    border: 'none',
    textAlign: 'left',
    cursor: 'pointer',
    color: theme.color.bulma[100],
    backgroundColor: 'transparent',
    'span::before': {
      display: 'none'
    },
    '&:hover, &:focus': {
      backgroundColor: theme.color.goku[100]
    }
  };
});

var CheckboxMultiselect = function CheckboxMultiselect(_ref2) {
  var options = _ref2.options,
      _ref2$value = _ref2.value,
      value = _ref2$value === void 0 ? [] : _ref2$value,
      onChange = _ref2.onChange,
      maxHeight = _ref2.maxHeight;

  var onCheckboxChange = function onCheckboxChange(optionValue) {
    if (value.includes(optionValue)) {
      onChange(value.filter(function (currentValue) {
        return currentValue !== optionValue;
      }));
    } else {
      onChange([].concat(_toConsumableArray(value), [optionValue]));
    }
  };

  return /*#__PURE__*/_react["default"].createElement(List, {
    style: {
      maxHeight: maxHeight
    }
  }, options.map(function (option) {
    return /*#__PURE__*/_react["default"].createElement(_Inline["default"], {
      key: option.value,
      space: "xsmall"
    }, /*#__PURE__*/_react["default"].createElement(Option, null, /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
      id: option.id,
      checked: value.some(function (currentValue) {
        return currentValue === option.value;
      }),
      onChange: function onChange() {
        return onCheckboxChange(option.value);
      },
      disabled: option.count === undefined ? false : !option.count,
      label: option.label
    })), option.count !== undefined && /*#__PURE__*/_react["default"].createElement(_Text["default"], {
      size: 14,
      color: "trunks.100",
      "test-id": "select-count"
    }, option.count));
  }));
};

CheckboxMultiselect.defaultProps = {
  maxHeight: 250
};
var _default = CheckboxMultiselect;
exports["default"] = _default;
//# sourceMappingURL=CheckboxMultiselect.js.map