{"version":3,"sources":["../../src/checkboxMultiselect/CheckboxMultiselect.tsx"],"names":["List","styled","ul","overflow","listStyle","padding","margin","Option","label","theme","display","flex","alignItems","fontSize","lineHeight","textDecoration","outline","border","textAlign","cursor","color","bulma","backgroundColor","goku","CheckboxMultiselect","options","value","onChange","maxHeight","onCheckboxChange","optionValue","includes","filter","currentValue","map","option","id","some","count","undefined","defaultProps"],"mappings":"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","sourcesContent":["import { rem } from '@heathmont/moon-utils';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport Checkbox from '../checkbox/Checkbox';\nimport Inline from '../inline/Inline';\nimport Text from '../text/Text';\n\ntype OptionType = {\n  label: string | JSX.Element;\n  value: any;\n  count?: number;\n  [key: string]: any;\n};\n\ntype CheckboxMultiselectProps = {\n  value?: any[];\n  options: OptionType[];\n  onChange: (value: any[]) => void;\n  maxHeight?: string | number;\n};\n\nconst List = styled.ul(() => ({\n  overflow: 'auto',\n  listStyle: 'none',\n  padding: 0,\n  margin: `0 0 0 -${rem(12)}`,\n}));\n\nconst Option = styled.label(({ theme }) => ({\n  display: 'flex',\n  flex: 1,\n  alignItems: 'center',\n  fontSize: rem(14),\n  lineHeight: rem(20),\n  padding: `${rem(10)} ${rem(12)}`,\n  margin: 0,\n  textDecoration: 'none',\n  outline: 'none',\n  border: 'none',\n  textAlign: 'left',\n  cursor: 'pointer',\n  color: theme.color.bulma[100],\n  backgroundColor: 'transparent',\n  'span::before': {\n    display: 'none',\n  },\n  '&:hover, &:focus': {\n    backgroundColor: theme.color.goku[100],\n  },\n}));\n\nconst CheckboxMultiselect: React.FC<CheckboxMultiselectProps> = ({\n  options,\n  value = [],\n  onChange,\n  maxHeight,\n}) => {\n  const onCheckboxChange = (optionValue: any) => {\n    if (value.includes(optionValue)) {\n      onChange(value.filter((currentValue) => currentValue !== optionValue));\n    } else {\n      onChange([...value, optionValue]);\n    }\n  };\n\n  return (\n    <List style={{ maxHeight }}>\n      {options.map((option) => (\n        <Inline key={option.value} space=\"xsmall\">\n          <Option>\n            <Checkbox\n              id={option.id}\n              checked={value.some(\n                (currentValue) => currentValue === option.value,\n              )}\n              onChange={() => onCheckboxChange(option.value)}\n              disabled={option.count === undefined ? false : !option.count}\n              label={option.label}\n            />\n          </Option>\n          {option.count !== undefined && (\n            <Text size={14} color=\"trunks.100\" test-id=\"select-count\">\n              {option.count}\n            </Text>\n          )}\n        </Inline>\n      ))}\n    </List>\n  );\n};\n\nCheckboxMultiselect.defaultProps = {\n  maxHeight: 250,\n};\n\nexport default CheckboxMultiselect;\n"],"file":"CheckboxMultiselect.js"}