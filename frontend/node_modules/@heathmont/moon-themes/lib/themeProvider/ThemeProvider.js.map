{"version":3,"sources":["../../src/themeProvider/ThemeProvider.tsx"],"names":["ThemeProvider","children","theme","hasTransition","initialTheme","React","useRef","handleChange","themeObject","current","document","documentElement","classList","add","themeTransitionClass","setTimeout","remove","themeTransitionDuration"],"mappings":";;;;;;;AAAA;;AACA;;AAGA;;;;AAwBA,IAAMA,aAA2C,GAAG,SAA9CA,aAA8C,OAI9C;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,MAEI,QAFJA,KAEI;AAAA,MADJC,aACI,QADJA,aACI;;AACJ,MAAMC,YAAY,GAAGC,kBAAMC,MAAN,CAAa,IAAb,CAArB;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,WAAD,EAAwB;AAC3C,QAAIL,aAAJ,EAAmB;AACjB,UAAIC,YAAY,CAACK,OAAjB,EAA0B;AACxBL,QAAAA,YAAY,CAACK,OAAb,GAAuB,KAAvB;AACA,eAAOD,WAAP;AACD;AAED;;;AACAE,MAAAA,QAAQ,IAAIA,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,CAAmCC,GAAnC,CAAuCC,qCAAvC,CAAZ;AACAC,MAAAA,UAAU,CAAC,YAAM;AACfL,QAAAA,QAAQ,IACHA,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,CAAmCI,MAAnC,CAA0CF,qCAA1C,CADL;AAED,OAHS,EAGPG,2CAA0B,EAHnB,CAAV;AAKA,aAAOT,WAAP;AACD;;AAED,WAAOA,WAAP;AACD,GAlBD;;AAoBA,sBACE,gCAAC,+BAAD;AAAqB,IAAA,KAAK,EAAE;AAAA,aAAMD,YAAY,CAACL,MAAD,CAAlB;AAAA;AAA5B,kBACE,gCAAC,iBAAD,CAAO,QAAP,qBACE,gCAAC,gCAAD,OADF,EAEGD,QAFH,CADF,CADF;AAQD,CAnCD;;eAqCeD,a","sourcesContent":["import React from 'react';\nimport { ThemeProvider as StyledThemeProvider } from 'styled-components';\n\nimport { Theme } from '../sharedTokens/sharedTokens';\nimport {\n  themeTransitionClass,\n  themeTransitionDuration,\n  ThemeTransition,\n} from '../themeTransition/ThemeTransition';\n\n/**\n * Rather than encouraging consumers to use `styled-components`' theming API\n * directly, we extend it. This means we have more flexibility in the future to\n * change the underlying framework (e.g. another CSS-in-JS library), if\n * absolutely necessary.\n */\n\n/**\n * Theme Provider\n *\n * See https://www.styled-components.com/docs/advanced#theming\n */\nexport type ThemeProviderProps = {\n  theme: Theme;\n  children?: React.ReactChild;\n  hasTransition?: boolean;\n};\n\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({\n  children,\n  theme,\n  hasTransition,\n}) => {\n  const initialTheme = React.useRef(true);\n\n  const handleChange = (themeObject: Theme) => {\n    if (hasTransition) {\n      if (initialTheme.current) {\n        initialTheme.current = false;\n        return themeObject;\n      }\n\n      /* Add the theme class, then remove once transitioned. */\n      document && document.documentElement.classList.add(themeTransitionClass);\n      setTimeout(() => {\n        document\n          && document.documentElement.classList.remove(themeTransitionClass);\n      }, themeTransitionDuration + 10);\n\n      return themeObject;\n    }\n\n    return themeObject;\n  };\n\n  return (\n    <StyledThemeProvider theme={() => handleChange(theme)}>\n      <React.Fragment>\n        <ThemeTransition />\n        {children}\n      </React.Fragment>\n    </StyledThemeProvider>\n  );\n};\n\nexport default ThemeProvider;\n"],"file":"ThemeProvider.js"}