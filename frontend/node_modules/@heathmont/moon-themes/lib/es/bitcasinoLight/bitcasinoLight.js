function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import bitcasinoDark from '../bitcasinoDark/bitcasinoDark';
var color = {
  hit: {
    120: '#D9E3E8',
    100: '#E3EAED',
    80: '#EDF1F3'
  },
  goku: {
    100: '#F3F5F6',
    80: '#EAEEF0',
    40: '#D8E0E3',
    10: '#C5D2D8'
  },
  gohan: {
    100: '#FFFFFF',
    80: '#F7F7F7',
    40: '#E8E8E8',
    10: '#D9D9D9'
  },
  beerus: {
    100: '#EAEEF0'
  },
  bulma: {
    100: '#0F161F'
  },
  trunks: {
    100: '#8697A2'
  }
};
var bitcasinoDarkColors = bitcasinoDark.color;

var bitcasinoLight = _objectSpread(_objectSpread({}, bitcasinoDark), {}, {
  color: _objectSpread(_objectSpread({}, bitcasinoDarkColors), {}, {
    text: color.bulma[100],
    background: color.goku[100]
  }, color),
  colorScheme: 'light'
});

export default bitcasinoLight;
//# sourceMappingURL=bitcasinoLight.js.map