import React from 'react';
import { ThemeProvider as StyledThemeProvider } from 'styled-components';
import { themeTransitionClass, themeTransitionDuration, ThemeTransition } from '../themeTransition/ThemeTransition';
/**
 * Rather than encouraging consumers to use `styled-components`' theming API
 * directly, we extend it. This means we have more flexibility in the future to
 * change the underlying framework (e.g. another CSS-in-JS library), if
 * absolutely necessary.
 */

/**
 * Theme Provider
 *
 * See https://www.styled-components.com/docs/advanced#theming
 */

var ThemeProvider = function ThemeProvider(_ref) {
  var children = _ref.children,
      _theme = _ref.theme,
      hasTransition = _ref.hasTransition;
  var initialTheme = React.useRef(true);

  var handleChange = function handleChange(themeObject) {
    if (hasTransition) {
      if (initialTheme.current) {
        initialTheme.current = false;
        return themeObject;
      }
      /* Add the theme class, then remove once transitioned. */


      document && document.documentElement.classList.add(themeTransitionClass);
      setTimeout(function () {
        document && document.documentElement.classList.remove(themeTransitionClass);
      }, themeTransitionDuration + 10);
      return themeObject;
    }

    return themeObject;
  };

  return /*#__PURE__*/React.createElement(StyledThemeProvider, {
    theme: function theme() {
      return handleChange(_theme);
    }
  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ThemeTransition, null), children));
};

export default ThemeProvider;
//# sourceMappingURL=ThemeProvider.js.map