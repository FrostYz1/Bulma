function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import avertaStd from '../sharedTokens/avertaStd';
import sharedTokens from '../sharedTokens/sharedTokens';
import supportColors from '../supportColors/supportColors';
var boxShadow = '0px 2.4px 7.2px rgba(0, 0, 0, 0.18), 0px 12.8px 28.8px rgba(0, 0, 0, 0.22)';
var color = {
  piccolo: {
    120: '#1C40BB',
    100: '#284DCD',
    80: '#365AD8'
  },
  hit: {
    120: '#FFFFFF',
    100: '#F6F6F6',
    80: '#FBFBFB'
  },
  beerus: {
    100: '#E6E6E6'
  },
  goku: {
    100: '#F7F7F7',
    80: '#F9F9F9',
    40: '#FCFCFC',
    10: '#FFFFFF'
  },
  gohan: {
    100: '#FFFFFF',
    80: '#FBFBFB',
    40: '#F9F9F9',
    10: '#F6F6F6'
  },
  goten: {
    100: '#FFFFFF'
  },
  bulma: {
    100: '#000000'
  },
  trunks: {
    100: '#8697A2'
  }
};

var moneyballDark = _objectSpread(_objectSpread({}, sharedTokens), {}, {
  brand: 'Moneyball',
  fontFace: avertaStd.fontFace,
  fontFamily: avertaStd.fontStack,
  fontSize: {
    body: 14
  },
  fontWeight: avertaStd.fontWeight,
  boxShadow: boxShadow,
  color: _objectSpread(_objectSpread({
    text: color.bulma[100],
    background: color.goku[100]
  }, supportColors), color),
  colorScheme: 'dark'
});

export default moneyballDark;
//# sourceMappingURL=moneyballDark.js.map