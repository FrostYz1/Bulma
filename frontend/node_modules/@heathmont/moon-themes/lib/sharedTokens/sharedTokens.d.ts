import type { ColorShared, ColorValue } from '../supportColors/supportColors';
export declare type ZIndex = {
    carouselControl: number;
    dialog: number;
    toggle: number;
};
export declare type TransitionDuration = {
    slow: number;
    default: number;
};
export declare type Transition = {
    slow: string;
    default: string;
};
export declare type SpaceProps = keyof Space;
/**
 * @TODO Revisit to allow for 4px intervals, proposed:
 * xxsmall:  base.space * 0.25,
 * xsmall:   base.space * 0.5,
 * small:    base.space * 0.75,
 * default:  base.space,
 * medium:   base.space * 1.25,
 * large:    base.space * 1.5,
 * xlarge:   base.space * 2,
 * xxlarge:  base.space * 2.25
 * xxxlarge: base.space * 2.5,
 */
export declare type Space = {
    xsmall: number;
    small: number;
    default: number;
    medium: number;
    large: number;
    xlarge: number;
};
export declare type Radius = {
    small: number;
    default: number;
    largest: number;
};
export declare type Opacity = {
    disabled: number;
};
export declare type MaxWidth = {
    default: number;
    large: number;
};
export declare type FontFamily = string;
export declare type FontSize = {
    body: number;
};
export declare type FontWeight = {
    normal: number;
    semibold: number;
};
export declare type Breakpoint = {
    small: number;
    medium: number;
    large: number;
    xlarge: number;
};
export declare type BoxShadow = string;
export declare type BorderWidth = number;
export declare type BorderStyle = string;
export declare type Border = string;
declare type InteractiveColor = {
    120?: ColorValue;
    100?: ColorValue;
    80?: ColorValue;
};
declare type BackgroundColor = {
    100?: ColorValue;
    80?: ColorValue;
    40?: ColorValue;
    10?: ColorValue;
};
declare type SingletonColor = {
    100?: ColorValue;
};
export declare type ColorPalette = {
    120?: ColorValue;
    100?: ColorValue;
    80?: ColorValue;
    60?: ColorValue;
    40?: ColorValue;
    20?: ColorValue;
    10?: ColorValue;
};
export declare type Color = ColorBase & ColorThemed & ColorShared;
export declare type ColorNames = 'piccolo.120' | 'piccolo.100' | 'piccolo.80' | 'hit.120' | 'hit.100' | 'hit.80' | 'goku.100' | 'goku.80' | 'goku.40' | 'goku.10' | 'gohan.100' | 'gohan.80' | 'gohan.40' | 'gohan.10' | 'beerus.100' | 'goten.100' | 'bulma.100' | 'trunks.100' | 'krillin.100' | 'krillin.10' | 'chiChi.100' | 'chiChi.10' | 'roshi.100' | 'roshi.10' | 'dodoria.100' | 'dodoria.10' | 'cell.100' | 'cell.10' | 'raditz.100' | 'raditz.10' | 'whis.100' | 'whis.10' | 'frieza.100' | 'frieza.10' | 'nappa.100' | 'nappa.10' | 'popo.100';
/**
 * Color Props
 *
 * Access colors via dot notation where supported.
 *
 * Usage: `key.variant`
 * e.g. `piccolo.100`
 *
 * TODO: Type dot notation.
 */
export declare type ColorProps = ColorNames | string;
export declare type ColorBase = {
    text: ColorValue;
    background: ColorValue;
};
export declare type ColorPiccolo = {
    /**
     * Picollo (Primary)
     *
     * Usage: primary button colors.
     */
    piccolo: InteractiveColor;
};
export declare type ColorHit = {
    /**
     * Hit (Secondary)
     *
     * Usage: secondary button colors.
     */
    hit: InteractiveColor;
};
export declare type ColorGoku = {
    /**
     * Goku
     *
     * Usage: main background colors.
     */
    goku: BackgroundColor;
};
export declare type ColorGohan = {
    /**
     * Gohan
     *
     * Usage: secondary background colors.
     */
    gohan: BackgroundColor;
};
export declare type ColorBeerus = {
    /**
     * Beerus
     *
     * Usage: border colors.
     */
    beerus: SingletonColor;
};
export declare type ColorGoten = {
    /**
     * Goten
     *
     * Usage: button text, promotion card text & some cases body or headline text.
     */
    goten: SingletonColor;
};
export declare type ColorBulma = {
    /**
     * Bulma
     *
     * Usage: main body text.
     */
    bulma: SingletonColor;
};
export declare type ColorTrunks = {
    /**
     * Trunks
     *
     * Usage: secondary body text.
     */
    trunks: SingletonColor;
};
export declare type ColorThemed = ColorPiccolo & ColorHit & ColorGoku & ColorGohan & ColorBeerus & ColorGoten & ColorBulma & ColorTrunks;
export interface Base {
    /**
     * ⚠️ Immutable
     *
     * Base FontSize and Base Space are immutable theme settings, in other words
     * the remain the same in **all** themes and *must not* be changed under any
     * circumstances.
     *
     * These settings are crucial for calculating values such as `rem` without
     * having to over-use theme hooks/context calls.
     *
     * If you need to adjust the body font-size, consider using the theme-specific
     * setting `fontSize.body`.
     *
     * If you need to adjust the space, make use of the `space` theme config.
     */
    readonly space: 16;
    readonly fontSize: 16;
    /**
     * ✅ Customisable
     *
     * Although the base.fontSize cannot be modified, the line-height can be
     * adjusted to suit your font-face use-case.
     */
    readonly lineHeight: number;
}
export declare type Brand = 'Sportsbet.io' | 'Betadda' | 'Bitcasino.io' | 'Comms' | 'Slots.io' | 'LuckySlots' | 'BombayClub' | 'Livecasino.io' | 'Hub88' | 'Aposta10' | 'BTCXE' | 'MissionsTool' | 'Moneyball' | 'MoonDesign' | 'ShangriLa.io' | 'Empire.io' | 'Tajcasino';
export declare type ColorScheme = 'light' | 'dark';
export interface SharedTheme {
    base: Base;
    border: Border;
    borderWidth: BorderWidth;
    borderStyle: BorderStyle;
    boxShadow: BoxShadow;
    breakpoint: Breakpoint;
    fontFace?: any;
    fontFamily: FontFamily;
    fontSize: FontSize;
    fontWeight: FontWeight;
    maxWidth: MaxWidth;
    opacity: Opacity;
    radius: Radius;
    space: Space;
    transitionDuration: TransitionDuration;
    transition: Transition;
    zIndex: ZIndex;
}
export declare type Theme = SharedTheme & {
    brand: Brand;
    colorScheme: ColorScheme;
    color: Color;
};
declare const sharedTokens: SharedTheme;
export default sharedTokens;
//# sourceMappingURL=sharedTokens.d.ts.map