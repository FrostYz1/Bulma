function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { supportColors } from '@heathmont/moon-themes';
import rem from '../rem/rem';
export var focusReset = {
  '&:focus': {
    outline: 'none'
  },
  '&::-moz-focus-inner': {
    border: 0
  }
};
export var focus = function focus() {
  var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : supportColors.whis[100];
  return _objectSpread(_objectSpread({}, focusReset), {}, {
    '&:focus': {
      outline: 'none'
      /* Duplicate `:focus` doesn't spread nice */
      ,
      boxShadow: "0 0 ".concat(rem(2), " ").concat(rem(2), " ").concat(color)
    }
  });
};
export default focus;
//# sourceMappingURL=focus.js.map