function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import styled from 'styled-components';
import { themed } from '@heathmont/moon-utils';

var Svg = function Svg(props) {
  return /*#__PURE__*/React.createElement("svg", _extends({
    width: "1em",
    height: "1em",
    viewBox: "0 0 32 32",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M14.5 4C8.701 4 4 8.701 4 14.5S8.701 25 14.5 25c2.897 0 5.518-1.172 7.42-3.07A10.465 10.465 0 0025 14.5C25 8.701 20.299 4 14.5 4zM2 14.5C2 7.596 7.596 2 14.5 2S27 7.596 27 14.5c0 3.094-1.125 5.927-2.987 8.11l5.693 5.682a1 1 0 01-1.412 1.416l-5.696-5.685A12.454 12.454 0 0114.5 27C7.596 27 2 21.404 2 14.5z",
    fill: "currentColor"
  }));
};

var IconZoom = styled(Svg).withConfig({
  displayName: "IconZoom",
  componentId: "sc-1funsd9-0"
})(function (_ref) {
  var backgroundColor = _ref.backgroundColor,
      circleColor = _ref.circleColor,
      color = _ref.color,
      theme = _ref.theme;
  return [backgroundColor && {
    backgroundColor: themed('color', backgroundColor)(theme),
    padding: backgroundColor ? '0.25em' : 0,
    overflow: 'visible',
    borderRadius: '50%'
  }, color && {
    color: themed('color', color)(theme)
  }, circleColor && {
    circle: {
      fill: themed('color', circleColor)(theme)
    }
  }];
});
export default IconZoom;
//# sourceMappingURL=IconZoom.js.map