var _excluded = ["disabled", "ariaLabel", "label", "id", "variant"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { inlineSvg, rem, hideVisually } from '@heathmont/moon-utils';
import { CheckboxIcon } from './private/icon';
var BORDER_WIDTH = 2; // Hide checkbox visually but remain accessible to screen readers.

export var CheckboxHiddenInput = styled.input.attrs({
  type: 'checkbox'
}).withConfig({
  displayName: "Checkbox__CheckboxHiddenInput",
  componentId: "sc-11ilkcd-0"
})(function (_ref) {
  var theme = _ref.theme;
  return _objectSpread(_objectSpread({}, hideVisually()), {}, {
    '&:checked + figure::after': {
      backgroundColor: theme.color.piccolo[100],
      backgroundSize: rem(10)
    },
    '&:hover:enabled, &:focus:enabled': {
      /* Show the Pseudo Checkbox Circle */
      '& + figure::before': {
        opacity: 0.2,
        transform: 'scale(2)',
        backgroundColor: theme.color.trunks[100],
        transitionProperty: 'background-color, transform, opacity',
        willChange: 'transform, opacity'
      },
      '&:checked + figure::before': {
        opacity: 0.1,
        backgroundColor: theme.color.piccolo[100]
        /* [1] */

      },

      /* Adjust the Pseudo Checkbox */
      '&:not(:checked) + figure::after': {
        borderColor: theme.color.trunks[100]
      }
    },
    '&:disabled ~ *': {
      opacity: '0.5',
      cursor: 'not-allowed'
    }
  });
});
export var CheckboxStyledInput = styled.figure.withConfig({
  displayName: "Checkbox__CheckboxStyledInput",
  componentId: "sc-11ilkcd-1"
})(function (_ref2) {
  var theme = _ref2.theme;
  return {
    position: 'relative',
    display: 'inline-block',
    boxSizing: 'border-box',
    width: rem(theme.space["default"]),
    height: rem(theme.space["default"]),
    border: "".concat(rem(BORDER_WIDTH), " solid ").concat(theme.color.trunks[100]),
    borderRadius: rem(2),
    transitionDuration: "".concat(theme.transitionDuration["default"], "s"),

    /* Common styles for the Pseudo Checkbox Circle and "check" */
    '&::before, &::after': {
      content: '""',
      position: 'absolute',
      width: rem(theme.space["default"]),
      height: rem(theme.space["default"]),
      top: rem(-BORDER_WIDTH),
      left: rem(-BORDER_WIDTH),
      transitionTimingFunction: 'ease'
    },

    /* Show the Pseudo Checkbox Circle */
    '&::before': {
      transitionDuration: "".concat(theme.transitionDuration["default"], "s"),
      borderRadius: '50%'
    },

    /* Add the "check" to the Pseudo Checkbox */
    '&::after': {
      display: 'inline-block',
      backgroundImage: inlineSvg( /*#__PURE__*/React.createElement(CheckboxIcon, {
        color: theme.color.goten[100]
      })),
      backgroundRepeat: 'no-repeat',
      backgroundPosition: 'center',
      borderRadius: rem(2),
      backgroundColor: 'transparent',
      backgroundSize: 0,
      transitionProperty: 'border-color'
    }
  };
});
export var CheckboxLabel = styled.label.withConfig({
  displayName: "Checkbox__CheckboxLabel",
  componentId: "sc-11ilkcd-2"
})(function (_ref3) {
  var theme = _ref3.theme;
  return {
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    gap: rem(theme.space.small)
  };
}, function (_ref4) {
  var variant = _ref4.variant,
      theme = _ref4.theme;

  if (variant === 'option') {
    return {
      padding: rem(20),
      '&:hover': {
        backgroundColor: theme.color.gohan[100]
      }
    };
  }

  return {
    width: 'fit-content'
  };
});
export var CheckboxCaption = styled.span.withConfig({
  displayName: "Checkbox__CheckboxCaption",
  componentId: "sc-11ilkcd-3"
})(function (_ref5) {
  var theme = _ref5.theme;
  return {
    color: theme.color.trunks[100]
  };
});
var Checkbox = forwardRef(function (_ref6, ref) {
  var disabled = _ref6.disabled,
      ariaLabel = _ref6.ariaLabel,
      label = _ref6.label,
      id = _ref6.id,
      variant = _ref6.variant,
      inputProps = _objectWithoutProperties(_ref6, _excluded);

  return /*#__PURE__*/React.createElement(CheckboxLabel, {
    htmlFor: id,
    variant: variant
  }, /*#__PURE__*/React.createElement(CheckboxHiddenInput, _extends({
    disabled: disabled,
    "aria-label": ariaLabel,
    id: id,
    ref: ref
  }, inputProps)), /*#__PURE__*/React.createElement(CheckboxStyledInput, null), label && /*#__PURE__*/React.createElement(CheckboxCaption, null, label));
});
export default Checkbox;
//# sourceMappingURL=Checkbox.js.map