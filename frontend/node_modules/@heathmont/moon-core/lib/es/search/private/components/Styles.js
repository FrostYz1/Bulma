function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import styled from 'styled-components';
import { mq, rem } from '@heathmont/moon-utils';
import { Button } from '@heathmont/moon-components';
import { zIndex } from './settings';
export var SearchForm = styled.form.withConfig({
  displayName: "Styles__SearchForm",
  componentId: "sc-1urf7j8-0"
})({
  display: 'flex',
  position: 'relative',
  overflow: 'visible',
  width: '100%'
});
export var FlexWrapper = styled.div.withConfig({
  displayName: "Styles__FlexWrapper",
  componentId: "sc-1urf7j8-1"
})(function (_ref) {
  var space = _ref.theme.space;
  return {
    position: 'relative',
    display: 'flex',
    justifyContent: 'space-between',
    gap: rem(space.small)
  };
});
export var ModalClose = styled(Button).withConfig({
  displayName: "Styles__ModalClose",
  componentId: "sc-1urf7j8-2"
})(function (_ref2) {
  var _ref3;

  var _ref2$theme = _ref2.theme,
      base = _ref2$theme.base,
      breakpoint = _ref2$theme.breakpoint,
      color = _ref2$theme.color,
      fontWeight = _ref2$theme.fontWeight,
      space = _ref2$theme.space;
  return _ref3 = {
    position: 'relative',
    display: 'flex',
    flex: 0,
    border: 0,
    lineHeight: 1,
    padding: "0 ".concat(rem(space["default"])),
    fontWeight: fontWeight.normal,
    fontSize: rem(base.fontSize),
    overflow: 'visible',
    color: color.piccolo[100]
  }, _defineProperty(_ref3, '&:hover:not([disabled])', {
    color: color.piccolo[100]
  }), _defineProperty(_ref3, mq(breakpoint.medium, 'min-width'), {
    display: 'none'
  }), _ref3;
});
export var Results = styled.div.withConfig({
  displayName: "Styles__Results",
  componentId: "sc-1urf7j8-3"
})(function (_ref4) {
  var _ref4$theme = _ref4.theme,
      borderWidth = _ref4$theme.borderWidth,
      boxShadow = _ref4$theme.boxShadow,
      breakpoint = _ref4$theme.breakpoint,
      color = _ref4$theme.color,
      radius = _ref4$theme.radius,
      space = _ref4$theme.space;
  return _defineProperty({
    position: 'absolute',
    left: 0,
    top: rem(space.small),
    color: color.trunks[100],
    width: '100%',
    zIndex: zIndex.searchResults
  }, mq(breakpoint.medium, 'min-width'), {
    width: 'auto',
    minWidth: '300px',
    maxWidth: '100%',
    boxSizing: 'border-box',
    padding: "".concat(rem(space.small), " ").concat(rem(space.xsmall)),
    borderRadius: rem(radius["default"]),
    borderWidth: borderWidth,
    borderStyle: 'solid',
    borderColor: color.beerus[100],
    backgroundColor: color.gohan[100],
    boxShadow: boxShadow
  });
});
//# sourceMappingURL=Styles.js.map