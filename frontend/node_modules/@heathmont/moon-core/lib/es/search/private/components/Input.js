function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import styled from 'styled-components';
import { Button } from '@heathmont/moon-components';
import { mq, rem } from '@heathmont/moon-utils';
import IconClose from '../../../private/icons/IconErrorCircle';
import IconMenu from '../../../private/icons/IconMenu';
import IconSearch from '../../../private/icons/IconSearch';
import { inputConfig, zIndex } from './settings';
var borderWidth = inputConfig.borderWidth,
    padding = inputConfig.padding;
export var SearchClearButton = styled(Button).withConfig({
  displayName: "Input__SearchClearButton",
  componentId: "vvx0zy-0"
})(function (_ref) {
  var space = _ref.theme.space;
  return {
    position: 'absolute',
    top: 0,
    right: borderWidth,
    height: '100%',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    padding: "0 ".concat(rem(space.small)),
    border: 'none',
    background: 'transparent',
    appearance: 'none',
    zIndex: zIndex.searchIcon
  };
});
export var SearchClearIcon = styled(IconClose).withConfig({
  displayName: "Input__SearchClearIcon",
  componentId: "vvx0zy-1"
})(function (_ref2) {
  var _ref2$theme = _ref2.theme,
      color = _ref2$theme.color,
      fontSize = _ref2$theme.fontSize,
      space = _ref2$theme.space;
  return {
    color: color.trunks[100],
    fontSize: rem(fontSize.body),
    width: space["default"],
    height: space["default"]
  };
});
export var SearchInputIcon = styled(IconSearch).withConfig({
  displayName: "Input__SearchInputIcon",
  componentId: "vvx0zy-2"
})(function (_ref3) {
  var inputSize = _ref3.inputSize,
      _ref3$theme = _ref3.theme,
      color = _ref3$theme.color,
      fontSize = _ref3$theme.fontSize,
      space = _ref3$theme.space;
  return {
    position: 'absolute',
    top: '50%',
    left: rem(padding[inputSize] + borderWidth),
    transform: 'translateY(-50%)',
    zIndex: zIndex.searchIcon,
    fontSize: rem(fontSize.body),
    color: color.trunks[100],
    pointerEvents: 'none',
    width: space["default"],
    height: space["default"]
  };
});
export var SearchMenuIcon = styled(IconMenu).withConfig({
  displayName: "Input__SearchMenuIcon",
  componentId: "vvx0zy-3"
})(function (_ref4) {
  var _ref4$theme = _ref4.theme,
      color = _ref4$theme.color,
      fontSize = _ref4$theme.fontSize,
      space = _ref4$theme.space;
  return {
    position: 'absolute',
    top: '50%',
    right: rem(space["default"]),
    color: color.trunks[100],
    fontSize: rem(fontSize.body),
    transform: 'translateY(-50%)',
    zIndex: zIndex.searchIcon,
    width: space["default"],
    height: space["default"]
  };
});
export var SearchInput = styled.input.withConfig({
  displayName: "Input__SearchInput",
  componentId: "vvx0zy-4"
})(function (_ref5) {
  var hasBorder = _ref5.hasBorder,
      inputSize = _ref5.inputSize,
      _ref5$theme = _ref5.theme,
      breakpoint = _ref5$theme.breakpoint,
      color = _ref5$theme.color,
      fontSize = _ref5$theme.fontSize,
      fontWeight = _ref5$theme.fontWeight,
      radius = _ref5$theme.radius,
      space = _ref5$theme.space;
  return _defineProperty({
    fontWeight: fontWeight.normal,
    fontSize: rem(fontSize.body),
    width: '100%',
    lineHeight: 1,
    position: 'relative',
    paddingTop: 0,
    paddingRight: rem(padding[inputSize] + space["default"]),
    paddingBottom: 0,
    paddingLeft: rem(2 * padding[inputSize] + space["default"]),
    textOverflow: 'ellipsis',
    overflow: 'hidden',
    backgroundColor: hasBorder ? color.goku[100] : color.gohan[100],
    color: color.trunks[100],
    borderRadius: rem(radius["default"]),
    border: hasBorder ? "".concat(rem(borderWidth), " solid transparent") : 'none',
    outline: 0,
    zIndex: zIndex.searchInput,
    '&::placeholder': {
      color: 'inherit'
    },
    '&:hover': {
      backgroundColor: color.gohan[100],
      borderColor: color.beerus[100]
    },
    '&:active, &:focus': {
      backgroundColor: color.gohan[100],
      borderColor: color.piccolo[100],
      color: color.bulma[100]
    }
  }, mq(breakpoint.medium, 'max-width'), {
    '.popup-open &': {
      borderColor: color.piccolo[100]
    }
  });
});
export var SearchBox = styled.span.withConfig({
  displayName: "Input__SearchBox",
  componentId: "vvx0zy-5"
})(function (_ref7) {
  var fontSize = _ref7.theme.fontSize;
  return {
    display: 'flex',
    position: 'relative',
    fontSize: rem(fontSize.body),
    overflow: 'visible',
    width: '100%'
  };
}, function (_ref8) {
  var size = _ref8.size;
  return !!size && {
    height: rem(inputConfig.height[size])
  };
});
//# sourceMappingURL=Input.js.map