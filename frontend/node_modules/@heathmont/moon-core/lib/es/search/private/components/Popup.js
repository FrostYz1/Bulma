function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useCallback, useEffect, useRef } from 'react';
import styled from 'styled-components';
import { mq, rem } from '@heathmont/moon-utils';
import { FlexWrapper, ModalClose } from './Styles';
import { popupConfig } from './settings';
export var StyledPopup = styled.div.withConfig({
  displayName: "Popup__StyledPopup",
  componentId: "sc-1lsi3ri-0"
})(function (_ref) {
  var _ref2;

  var _ref$theme = _ref.theme,
      base = _ref$theme.base,
      breakpoint = _ref$theme.breakpoint,
      color = _ref$theme.color,
      space = _ref$theme.space,
      zIndex = _ref$theme.zIndex;
  return _ref2 = {
    background: 'transparent',
    position: 'relative',
    padding: 0,
    borderRadius: rem(popupConfig.borderRadius),
    fontSize: rem(base.fontSize),
    lineHeight: rem(24)
  }, _defineProperty(_ref2, '&.popup-open', {
    zIndex: zIndex.dialog
  }), _defineProperty(_ref2, mq(breakpoint.medium, 'max-width'), _defineProperty({}, '&.popup-open', {
    position: 'fixed',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    background: color.goten[100],
    padding: rem(space["default"])
  })), _ref2;
});

var Popup = function Popup(_ref3) {
  var children = _ref3.children,
      closeButton = _ref3.closeButton,
      closePopup = _ref3.closePopup,
      isOpen = _ref3.isOpen,
      title = _ref3.title;
  var ref = useRef(null);
  var escapeListener = useCallback(function (e) {
    if (e.key === 'Escape') {
      closePopup();
    }
  }, []);
  var clickListener = useCallback(function (e) {
    e.stopPropagation();

    if (ref.current && !ref.current.contains(e.target)) {
      closePopup();
    }
  }, [ref.current]);
  useEffect(function () {
    // Attach the listeners on component mount.
    document.addEventListener('click', clickListener);
    document.addEventListener('keyup', escapeListener); // Detach the listeners on component unmount.

    return function () {
      document.removeEventListener('click', clickListener);
      document.removeEventListener('keyup', escapeListener);
    };
  }, []);
  return /*#__PURE__*/React.createElement(StyledPopup, {
    className: isOpen ? 'popup-open' : '',
    ref: ref
  }, /*#__PURE__*/React.createElement(FlexWrapper, null, title, !!closeButton && isOpen ? /*#__PURE__*/React.createElement(ModalClose, {
    onClick: closePopup
  }, closeButton) : null), isOpen && children && /*#__PURE__*/React.createElement(FlexWrapper, null, children));
};

export default Popup;
//# sourceMappingURL=Popup.js.map