var _excluded = ["closeButton", "hasBorder", "onChange", "onClear", "onSubmit", "placeholder", "query", "results", "size"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useRef, useState } from 'react';
import Popup from './private/components/Popup';
import { SearchResults } from './private/components/SearchResults';
import { SearchForm } from './private/components/Styles';
import { SearchBox, SearchClearButton, SearchClearIcon, SearchInput, SearchInputIcon } from './private/components/Input';

var Search = function Search(_ref) {
  var closeButton = _ref.closeButton,
      _ref$hasBorder = _ref.hasBorder,
      hasBorder = _ref$hasBorder === void 0 ? true : _ref$hasBorder,
      onChange = _ref.onChange,
      onClear = _ref.onClear,
      onSubmit = _ref.onSubmit,
      placeholder = _ref.placeholder,
      _ref$query = _ref.query,
      query = _ref$query === void 0 ? '' : _ref$query,
      results = _ref.results,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'medium' : _ref$size,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      popupOpen = _useState2[0],
      setPopupOpen = _useState2[1];

  var _useState3 = useState(query),
      _useState4 = _slicedToArray(_useState3, 2),
      searchStr = _useState4[0],
      setSearchStr = _useState4[1];

  var search = useRef(null);

  var searchChange = function searchChange(e) {
    setSearchStr(e.target.value);
    onChange && onChange(e);
  };

  var clearSearch = function clearSearch(e) {
    e.stopPropagation();
    setSearchStr('');
    onClear && onClear();
  };

  var closePopup = function closePopup() {
    setPopupOpen(false);
  };

  var openPopup = function openPopup() {
    setPopupOpen(true);
  };

  return /*#__PURE__*/React.createElement(Popup, {
    closeButton: closeButton,
    closePopup: closePopup,
    isOpen: popupOpen,
    title: /*#__PURE__*/React.createElement(SearchForm, {
      onSubmit: onSubmit
    }, /*#__PURE__*/React.createElement(SearchBox, {
      size: size
    }, /*#__PURE__*/React.createElement(SearchInput, _extends({
      autoComplete: "off",
      hasBorder: hasBorder,
      inputSize: size,
      onChange: searchChange,
      onFocus: openPopup,
      placeholder: placeholder,
      ref: search,
      required: true,
      type: "text",
      value: searchStr
    }, props)), /*#__PURE__*/React.createElement(SearchInputIcon, {
      inputSize: size
    }), searchStr && popupOpen && /*#__PURE__*/React.createElement(SearchClearButton, {
      onClick: clearSearch
    }, /*#__PURE__*/React.createElement(SearchClearIcon, null)), /*#__PURE__*/React.createElement("input", {
      type: "submit",
      hidden: true
    })))
  }, /*#__PURE__*/React.createElement(React.Fragment, null, popupOpen && results && /*#__PURE__*/React.createElement(SearchResults, {
    results: results
  })));
};

export default Search;
//# sourceMappingURL=Search.js.map